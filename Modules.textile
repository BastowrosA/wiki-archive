Check out &quot;search.npmjs.org&quot;:http://search.npmjs.org/ too

h2. Adding to this page

When you add a framework to this page, have a look at how others have done so, it should be a single item, with a link to the project&#39;s source code, and a short description (one line after formatting has been applied).

If you see a module without a description, feel free to edit the page and add it in, any contributions are appreciated.

When you edit this list, also add your module to [[library-compatibility]] so that users will know which versions of Node it was tested with.

Table of contents! &lt;!-- generated by http://jsfiddle.net/ASXPb/4/ and the amazing dtrejo! ;) --&gt;

* &lt;a href=&quot;#modules&quot; rel=&quot;nofollow&quot;&gt;Modules&lt;/a&gt;
** &lt;a href=&quot;#web-frameworks&quot; rel=&quot;nofollow&quot;&gt;Web frameworks&lt;/a&gt;
*** &lt;a href=&quot;#web-frameworks-routers&quot; rel=&quot;nofollow&quot;&gt;Routers&lt;/a&gt;
*** &lt;a href=&quot;#web-frameworks-static&quot; rel=&quot;nofollow&quot;&gt;Static file servers&lt;/a&gt;
*** &lt;a href=&quot;#web-frameworks-micro&quot; rel=&quot;nofollow&quot;&gt;Microframeworks&lt;/a&gt;
*** &lt;a href=&quot;#web-frameworks-full&quot; rel=&quot;nofollow&quot;&gt;Frameworks&lt;/a&gt;
*** &lt;a href=&quot;#middleware&quot; rel=&quot;nofollow&quot;&gt;Middleware&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;wiki-middleware-jsgi&quot; rel=&quot;nofollow&quot;&gt;&lt;/a&gt;
*** &lt;a href=&quot;#web-frameworks-other&quot; rel=&quot;nofollow&quot;&gt;Other&lt;/a&gt;
** &lt;a href=&quot;#database&quot; rel=&quot;nofollow&quot;&gt;Database&lt;/a&gt;
** &lt;a href=&quot;#templating&quot; rel=&quot;nofollow&quot;&gt;Templating&lt;/a&gt;
** &lt;a href=&quot;#css-engines&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; Engines&lt;/a&gt;
** &lt;a href=&quot;#content-management&quot; rel=&quot;nofollow&quot;&gt;Content Management Systems&lt;/a&gt;
** &lt;a href=&quot;#build-and-deployment&quot; rel=&quot;nofollow&quot;&gt;Build and Deployment&lt;/a&gt;
** &lt;a href=&quot;#package-management&quot; rel=&quot;nofollow&quot;&gt;Package Management Systems&lt;/a&gt;
** &lt;a href=&quot;#module-loader&quot; rel=&quot;nofollow&quot;&gt;Module Loader&lt;/a&gt;
** &lt;a href=&quot;#security&quot; rel=&quot;nofollow&quot;&gt;OpenSSL / Crypto / Hashing&lt;/a&gt;
** &lt;a href=&quot;#smtp&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;SMTP&lt;/span&gt;&lt;/a&gt;
** &lt;a href=&quot;#tcp&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;TCP&lt;/span&gt; / IP&lt;/a&gt;
** &lt;a href=&quot;#rpc&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;RPC&lt;/span&gt;&lt;/a&gt;
** &lt;a href=&quot;#ws-ajax&quot; rel=&quot;nofollow&quot;&gt;Web Sockets &amp;amp; Ajax&lt;/a&gt;
** &lt;a href=&quot;#message-queue&quot; rel=&quot;nofollow&quot;&gt;Message Queues&lt;/a&gt;
** &lt;a href=&quot;#class-system&quot; rel=&quot;nofollow&quot;&gt;Class systems&lt;/a&gt;
** &lt;a href=&quot;#testing&quot; rel=&quot;nofollow&quot;&gt;Testing / Spec Frameworks&lt;/a&gt;
** &lt;a href=&quot;#wrappers&quot; rel=&quot;nofollow&quot;&gt;Wrappers&lt;/a&gt;
** &lt;a href=&quot;#parsers&quot; rel=&quot;nofollow&quot;&gt;Parsers&lt;/a&gt;
*** &lt;a href=&quot;#parsers-json&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;&lt;/a&gt;
*** &lt;a href=&quot;#parsers-xml&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;&lt;/a&gt;
*** &lt;a href=&quot;#parsers-commandline&quot; rel=&quot;nofollow&quot;&gt;Command Line Option Parsers&lt;/a&gt;
*** &lt;a href=&quot;#parser-generators&quot; rel=&quot;nofollow&quot;&gt;Parser Generators&lt;/a&gt;
*** &lt;a href=&quot;#parsers-other&quot; rel=&quot;nofollow&quot;&gt;Other Parsers&lt;/a&gt;
** &lt;a href=&quot;#debugging&quot; rel=&quot;nofollow&quot;&gt;Debugging / Console Utilities&lt;/a&gt;
** &lt;a href=&quot;#compression&quot; rel=&quot;nofollow&quot;&gt;Compression&lt;/a&gt;
** &lt;a href=&quot;#graphics&quot; rel=&quot;nofollow&quot;&gt;Graphics&lt;/a&gt;
** &lt;a href=&quot;#sound&quot; rel=&quot;nofollow&quot;&gt;Sound&lt;/a&gt;
** &lt;a href=&quot;#payment-gateways&quot; rel=&quot;nofollow&quot;&gt;Payment Gateways&lt;/a&gt;
** &lt;a href=&quot;#api-clients&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; clients&lt;/a&gt;
** &lt;a href=&quot;#async-flow&quot; rel=&quot;nofollow&quot;&gt;Control flow / Async goodies&lt;/a&gt;
** &lt;a href=&quot;#i18n&quot; rel=&quot;nofollow&quot;&gt;I18n and L10n modules&lt;/a&gt;
** &lt;a href=&quot;#boilerplates&quot; rel=&quot;nofollow&quot;&gt;Boilerplates&lt;/a&gt;
** &lt;a href=&quot;#continuous-integration&quot; rel=&quot;nofollow&quot;&gt;Continuous Integration Tools&lt;/a&gt;
** &lt;a href=&quot;#other&quot; rel=&quot;nofollow&quot;&gt;Other&lt;/a&gt;
* &lt;a href=&quot;#management&quot; rel=&quot;nofollow&quot;&gt;Node Management Utilities&lt;/a&gt;
* &lt;a href=&quot;#commonjs-compat&quot; rel=&quot;nofollow&quot;&gt;CommonJS compatible modules that can be used with node.&lt;/a&gt;
* &lt;a href=&quot;#project-generators&quot; rel=&quot;nofollow&quot;&gt;Project Generators&lt;/a&gt;
* &lt;a href=&quot;#coffee-script&quot; rel=&quot;nofollow&quot;&gt;CoffeeScript modules&lt;/a&gt;
* &lt;a href=&quot;#search&quot; rel=&quot;nofollow&quot;&gt;Full text search&lt;/a&gt;

&lt;a name=&quot;wiki-wiki-modules&quot;&gt;&lt;/a&gt;

h2(#modules). &quot;Modules&quot;:#modules

&lt;a name=&quot;wiki-web-frameworks&quot;&gt;&lt;/a&gt;

h3(#web-frameworks). &quot;Web frameworks&quot;:#web-frameworks

&lt;a name=&quot;wiki-web-frameworks-routers&quot;&gt;&lt;/a&gt;

h4(#web-frameworks-routers). &quot;Routers&quot;:#web-frameworks-routers
* &quot;barista&quot;:https://github.com/kieran/barista -- A fast, flexible URL router &amp; generator, similar to Rails / merb
* &quot;beeline&quot;:https://github.com/xavi-/beeline -- A laughably simplistic router for node.js
* &quot;biggie-router&quot;:https://github.com/biggie/biggie-router -- Router for the biggie framework. Inspired by Sinatra and JQuery.
* &quot;choreographer&quot;:https://github.com/laughinghan/choreographer -- Your server is my stage -- dirt simple URL routing for Node.js. Easy to use, easy to understand. Sinatra-style API.
* &quot;clutch&quot;:https://github.com/clement/clutch -- no-frills web request router, supporting nested routes, regexp parameters
* &quot;connect&quot;:https://github.com/senchalabs/Connect -- Robust high performance middleware framework
* &quot;crossroads&quot;:http://millermedeiros.github.com/crossroads.js/ -- Powerful and Flexible routing library, works on the client-side as well and have support for advanced features.
* &quot;dispatch&quot;:https://github.com/caolan/dispatch -- Regular expression URL dispatcher for Connect
* &quot;escort&quot;:https://github.com/ckknight/escort -- High-performance, advanced routing and URL generation
* &quot;filter-chain&quot;:https://github.com/teknopaul/filter-chain -- Java ServletFilter style request chaining
* &quot;journey&quot;:https://github.com/cloudhead/journey -- liberal JSON-only HTTP request router
* &quot;node-router&quot;:https://github.com/creationix/node-router -- Simple Sinatra-like http server based on fu.js from the original node-chat demo.
* &quot;node.routes.js&quot;:https://github.com/defrex/node.routes.js/ -- A simple url router
* &quot;nozzle&quot;:https://github.com/fictorial/nozzle -- web app/service framework
* &quot;sherpa&quot;:https://github.com/joshbuddy/sherpa -- HTTP router/generator with support for regex and parameters
* &quot;router&quot;:https://github.com/gett/router -- A simple router with regex and sinatra like parameter support
* &quot;Beanpole&quot;:https://github.com/spiceapps/beanpole -- Universal router with syntactic sugar

&lt;a name=&quot;wiki-web-frameworks-static&quot;&gt;&lt;/a&gt;

h4(#web-frameworks-static). &quot;Static file servers&quot;:#web-frameworks-static
* &quot;Lightnode&quot;:http://www.ngspinners.com/lightnode/ -- Easy to understand. Fast. Provides simple framework. (hierarchical servers, delegation, caching, virtual hosts).
* &quot;navajo&quot;:https://github.com/dresende/navajo - A simple web server with the ability to run PHP or Node code as well as serve static files (alpha)
* &quot;Nitrode&quot;:https://github.com/ollym/nitrode -- A lightweight, super fast HTTP 1.1 with internal JS API
* &quot;antinode&quot;:https://github.com/mhansen/antinode -- A simple static web server
* &quot;connect&quot;:https://github.com/senchalabs/connect -- Connect&#39;s static() middleware provides flexible, high-performance, feature-rich static file serving
* &quot;node-paperboy&quot;:https://github.com/felixge/node-paperboy -- A node.js module for delivering static files
* &quot;node-static&quot;:https://github.com/cloudhead/node-static -- A simple, rfc 2616-compliant static file server module with built-in caching
* &quot;oui&quot;:https://github.com/rsms/oui -- Web service server with great static files support
* &quot;static&quot;:https://github.com/kriszyp/pintura/blob/master/jsgi/static.js - Static file handler using asynchronous streaming as JSGI middleware
* &quot;static-resource&quot;:https://github.com/atsuya/static-resource - Static resource handling for node.js
* &quot;Trailer&quot;:https://github.com/tylermwashburn/Trailer -- Everyone&#39;s favorite backend.
* &quot;nodetoy&quot;:https://github.com/teknopaul/nodetoy -- Static JSON file server that supports GET, POST and DELETE
* &quot;statify&quot;:https://github.com/techpriester/statify.js -- A static file server to make any directory available via HTTP from the command line.
* &quot;nserve&quot;:https://github.com/marty-wang/NServe -- A local development server, allowing for adjustable file transfer rate, mock web services and live reload.
&lt;a name=&quot;wiki-web-frameworks-micro&quot;&gt;&lt;/a&gt;

h4(#web-frameworks-micro). &quot;Microframeworks&quot;:#web-frameworks-micro
* &quot;Ni&quot;:https://github.com/chetan51/ni -- A minimalistic Node module / framework that makes setting up an MVC project a breeze
* &quot;(fab)&quot;:http://www.fabjs.org -- A modular and concise async web framework for node.js
* &quot;kaph&quot;:https://github.com/akaspin/kaph -- Not framework
* &quot;Layers&quot;:https://github.com/dave-elkan/layers -- A module to help create a layered web app with Express.
* &quot;Nerve&quot;:https://github.com/gjritter/nerve -- Microframework with simple array-based syntax for defining an app on top of node. (node.JS 0.1.30)
* &quot;restmvc.js&quot;:https://github.com/keithnlarsen/restmvc.js -- A simple library to help you quickly create RESTful webservices using Express, Mongoose, and MongoDB.
* &quot;rowan&quot;:https://github.com/idmillington/rowan -- A hierarchical microframework of reusable controllers and modular app logic.
* &quot;vroom&quot;:https://github.com/raycmorgan/vroom/tree/master -- A simple resource oriented web framework built on top of Node.js (November 2009, node.JS 0.1.16)
* &quot;Picard&quot;:https://github.com/dantebronto/picard
* &quot;simplex&quot;:https://github.com/mshakhan/simplex (October 2009, node.JS 0.1.14)
* &quot;Pipe-Layer&quot;:http://cgit.voodoowarez.com/pipe-layer/ -- Asynchronous HTTP router.
* &quot;frank&quot;:https://github.com/mvrilo/frank -- yet another sinatra-like microframework for node
* &quot;webservice.js&quot;:https://github.com/Marak/webservice.js -- turn node.js modules into RESTFul web-services
* &quot;zappa&quot;:https://github.com/mauricemach/zappa -- CoffeeScript minimalist interface to express, socket.io and others.
* &quot;jqNode&quot;:https://github.com/pradeek/jqNode -- Simple jQuery-esque API for small projects.


&lt;a name=&quot;wiki-web-frameworks-full&quot;&gt;&lt;/a&gt;

h4(#web-frameworks-full). &quot;Frameworks&quot;:#web-frameworks-full
* &quot;archetype&quot;:https://github.com/jefftrudeau/archetype/ -- A web framework leveraging Node.js
* &quot;aries&quot;:https://github.com/edjafarov/aries -- Annotation based MVC framework
* &quot;blueprint&quot;:https://github.com/ingklabs/blueprint -- **Blueprint for a Startup**. Middleware, &amp; MVC routing over Node.js &amp; Mongoose
* &quot;broke&quot;:https://github.com/brokenseal/broke/ -- A porting of the most famous &quot;Django Web Framework&quot;:http://www.djangoproject.com/
* &quot;chain&quot;:https://github.com/hassox/chain/ -- An evented convention for building Node Applications (Stopped Development, for ejsgi)
* &quot;Web.js&quot;:https://github.com/iwillwen/Web.js -- A simple, fast and light HTTP/TCP framework for NodeJS
* &quot;coltrane&quot;:https://github.com/ujh/coltrane/tree/master -- A try at a higher level library/framework for node.js web development (July 2009, node.JS 0.1.1)
* &quot;djangode&quot;:https://github.com/simonw/djangode -- A framework that borrows some useful concepts from &quot;Django&quot;:http://www.djangoproject.com/. (March 2010, node.JS 0.1.30)
* &quot;drty&quot;:https://github.com/drtyhbo/drty -- A Django port to NodeJS. Many Django features, still under heavy development. (January, 2011, 0.2.6)
* &quot;Express&quot;:https://github.com/visionmedia/express/tree/master -- A robust feature rich web development framework **inspired by Sinatra**
* &quot;Kiss.js&quot;:https://github.com/stanislavfeldman/kiss.js -- Web framework for node.js in CoffeeScript. Object-oriented, simple and sexy.
* &quot;Sayndo&quot;:https://github.com/zyndiecate/sayndo/tree/master -- Fast and flexible web server with customized routing and authorization
* &quot;N-Ext&quot;:https://github.com/xcambar/n-ext -- Ext.core, Ext.util and Ext.data packages in your NodeJS apps (includes a MongoDB proxy based on &quot;node-mongodb-native&quot;:https://github.com/xcambar/n-ext/node-mongodb-native)
* &quot;node-extjs&quot;:https://github.com/egorFiNE/node-extjs -- Run ExtJS4 data models on Node.js
* &quot;Ext Core for NodeJS&quot;:https://github.com/mycoding/Ext-Core-for-NodeJS -- Templating and some basic tricks of ExtCore and ExtJS(XTemplate,Ext.util.format)
* &quot;Grasshopper&quot;:https://github.com/tuxychandru/grasshopper/tree/master -- A feature-rich and flexible MVC framework for web applications and services, with integrated **dependency injection**.
* &quot;Geddy&quot;:https://github.com/mde/geddy/tree/master -- A hackable Web-app development framework similar to Merb/Rails/Pylons/Django
* &quot;GenJi&quot;:https://github.com/zir/genji -- A low-level loosely coupled web framework for nodejs
* &quot;jimi&quot;:https://github.com/colingourlay/jimi -- A framework for writing modular web applications in node.js (&quot;tutorial&quot;:https://github.com/colingourlay/jimi/wiki)
* &quot;js.io&quot;:https://github.com/mcarter/js.io -- JavaScript Networking Library for building real-time web applications. Also see &quot;JS.io&quot;:http://js.io
* &quot;merlin&quot;:https://github.com/brynbellomy/merlin -- Object-oriented MVC framework relying on a robust set of conventions to minimize code.  Also ships with optional plugins providing basic CMS-like functionality.
* &quot;PieJS&quot;:https://github.com/fakewaffle/piejs -- A rapid development MVC framework. Inspired and similar in style/convention to CakePHP. In very active development.
* &quot;RailwayJS&quot;:https://github.com/1602/express-on-railway -- An MVC web framework, similar to **Ruby on Rails**, Express/Connect-compatible. Also see &quot;here (en)&quot;:http://railwayjs.com and &quot;here (jp)&quot;:http://railwayjs.jp
* &quot;josi&quot;:https://github.com/thatismatt/josi -- An MVC web framework that&#39;s easy to pick up but doesn&#39;t get in the way. Also see &quot;here&quot;:http://thatismatt.github.com/josi/.
* &quot;Meryl&quot;:https://github.com/kadirpekel/meryl -- Minimalist web framework! See &quot;wiki&quot;:http://github.com/kadirpekel/meryl/wiki
* &quot;Coffeemate&quot;:https://github.com/kadirpekel/coffeemate -- Push coffee-script into web development!
* &quot;nodemachine&quot;:https://github.com/tautologistics/nodemachine -- A port of WebMachine to Node.js
* &quot;nodepress&quot;:https://github.com/zir/nodepress -- High-level web framework for nodejs, can be used as a blog by default
* &quot;pintura&quot;:https://github.com/kriszyp/pintura -- REST-based web framework/&quot;middleware&quot;:https://github.com/kriszyp/pintura/tree/master/lib/jsgi/ stack built for Ajax-style &quot;JSON-driven applications&quot;:http://www.sitepen.com/blog/2010/01/22/introducing-pintura/.
* &quot;SocketStream&quot;:https://github.com/socketstream/socketstream -- A fast full-stack real-time web framework for single-page apps
* &quot;spludo&quot;:http://spludo.com -- A full featured web framework. Fully Async + MVC with DI, AOP and Storages. (&quot;tutorial&quot;:http://docsforit.spludo.com/ + &quot;user-guide&quot;:http://spludo.com/user-guide/full/)
* &quot;Seek&quot;:https://github.com/fk1blow/Seek/ -- Small Javascript Web framework - mostly for learning purpose
* &quot;WIN&quot;:https://github.com/mathgladiator/win -- A simple page centric framework designed around CouchDB+Mustache
* &quot;Zeppelin&quot;:https://github.com/pelger/Zeppelin -- An early stage, low friction cloud development framework    
* &quot;Kassit&quot;:https://github.com/marxus85/kassit -- rapid building of client-side AJAX applications using &quot;Backbone&quot;:http://documentcloud.github.com/backbone/ and &quot;CoffeeScript&quot;:http://jashkenas.github.com/coffee-script/
* &quot;BaseJump&quot;:https://github.com/mediaupstream/BaseJump -- A RAD NodeJS Framework - Built on top of **Connect** (alpha release)
* &quot;JaxServer&quot;:http://www.jaxcore.com/jaxserver/ -- Application server and framework with template and css engines

&lt;a name=&quot;wiki-middleware&quot;&gt;&lt;/a&gt;

h4(#middleware). &quot;Middleware&quot;:#middleware
&lt;a name=&quot;wiki-middleware-jsgi&quot;&gt;&lt;/a&gt;
* &quot;JSGI&quot;:#middleware-jsgi 
** &quot;cascade&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/cascade.js -- Sequentially attempts multiple middleware apps.
** &quot;compress&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/compress.js - Gzip compresses (using node-compress) the response when appropriate based on request headers.
** &quot;media&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/media.js - Performs content type negotiation (per RFC2616) delegating to appropriate media handler.
** &quot;csrf&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/csrf.js - Checks HTTP request for possible cross-site request forgery, flags dangerous requests.
** &quot;xsite&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/xsite.js - Handles JSONP, window.name, and cross-origin XHR (CORS).
** &quot;rewriter&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/rewriter.js - Rewrites defined paths to other paths.
** &quot;static&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/static.js - Static file handler using asynchronous streaming.
** &quot;error&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/error.js - Catches uncaught errors and converts to appropriate HTTP error responses.
** &quot;conditional&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/conditional.js - Handles conditional HTTP requests (If-Modified-Since, etc.)
** &quot;http-params&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/http-params.js - Converts HTTP parameters http-&lt;name&gt; to headers.
** &quot;auth&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/auth.js - Handles Authentication (HTTP and cookie based).
** &quot;commonlogger&quot;:https://github.com/280north/jack/blob/0.3/lib/jack/commonlogger.js - A logger of HTTP requests.
** &quot;contentlength&quot;:https://github.com/280north/jack/blob/0.3/lib/jack/contentlength.js - Sets Content-Length header.
** &quot;head&quot;:https://github.com/280north/jack/blob/0.3/lib/jack/head.js - Handles HEAD requests (stripping body).
** &quot;redirect&quot;:https://github.com/280north/jack/blob/0.3/lib/jack/redirect.js - Redirects to other URLs
** &quot;urlmap&quot;:https://github.com/280north/jack/blob/0.3/lib/jack/urlmap.js - Maps to different apps by path/URL
** &quot;extension&quot;:https://github.com/dvv/pintura/blob/master/lib/jsgi/extension.js - Transforms .extension to a RESTful Accept header
** &quot;transporter&quot;:https://github.com/kriszyp/transporter - Share modules with browser, works RequireJS and Yabble
** &quot;routes&quot;:https://github.com/dvv/pintura/blob/master/lib/jsgi/routes.js - Simple RegExp based router
** &quot;session&quot;:https://github.com/kriszyp/pintura/blob/master/lib/jsgi/session.js - Session manager with pluggable storage handling
&lt;a name=&quot;wiki-middleware-connect&quot;&gt;&lt;/a&gt;
* &quot;Connect&quot;:#middleware-connect
** &quot;connect-airbrake&quot;:http://github.com/thegoleffect/connect-airbrake -- Airbrake error reporting auto-setup middleware
** &quot;connect-assetmanager&quot;:https://github.com/mape/connect-assetmanager - Asset manager for Connect for handling CSS/JS files
** &quot;connect-assets&quot;:https://github.com/TrevorBurnham/connect-assets - Compiled CSS/JS asset pipeline inspired by Rails 3.1
** &quot;connect-force-domain&quot;:https://github.com/shapeshed/connect-force-domain -- force all visitors onto a single domain
** &quot;connect-rpx&quot;:https://github.com/xrd/connect-rpx - Use RPX with Node.js and Connect
** &quot;connect_facebook&quot;:https://github.com/rsms/connect_facebook - Facebook session support for Connect
** &quot;facebook-wrapper&quot;:https://github.com/vladbagrin/facebook-wrapper -- Basic wrapper to the Facebook API, designed to work with Connect and Express
** &quot;connect_json&quot;:https://github.com/rsms/connect_json - Support for parsing JSON requests and sending JSON responses in Connect
** &quot;gzippo&quot;:https://github.com/tomgallacher/gzippo -- gzip static content files with Connect/Express
** &quot;cookie-sessions&quot;:https://github.com/caolan/cookie-sessions -- Secure cookie-based session store
** &quot;dispatch&quot;:https://github.com/caolan/dispatch -- Regular expression URL dispatcher
** &quot;formaline&quot;:https://github.com/rootslab/formaline - full-featured module for handling form POSTs/PUTs (multipart/form-data, application/x-www-form-urlencoded ) and fast parsing of file uploads, it speaks JSON and it is also ready for use with middlewares like connect.
** &quot;form2json&quot;:https://github.com/fgnass/form2json -- Decoder for form-urlencoded data that supports arrays of nested objects
** &quot;monomi&quot;:https://github.com/jamesgpearce/monomi/ -- Provides tools for handling tablet, touch, and mobile browsers
** &quot;node-facebook-session-cookie&quot;:https://github.com/jonashuckestein/node-facebook-session-cookie -- eats facebook cookies from client FB.login() and makes the session available as req.fb_session
** &quot;quip&quot;:https://github.com/caolan/quip -- Chainable HTTP response API  
** &quot;resource-router&quot;:https://github.com/s3u/resource-router -- A resource-oriented router to replace the default routing in express
** &quot;session.js&quot;:https://github.com/Marak/session.js -- super simple session middleware for node.js, even has optional &quot;magic&quot; sessions which monkey patch the httpServer with one line!
** &quot;session-web-sockets&quot;:https://github.com/kazuyukitanimura/session-web-sockets -- Pass session to (Socket.IO-node) in a secure manner.   Originally forked from &quot;bmeck/session-web-sockets&quot;:https://github.com/bmeck/session-web-sockets
** &quot;trust-reverse-proxy&quot;:https://github.com/zazengo/trust-reverse-proxy - Trust (SSL) connections coming from (a) specific reverse prox(y)(ies)
** &quot;node_signedcookies&quot;:https://github.com/mattrobenolt/node_signedcookies -- Extends Express&#39;s cookieParser() to read/write signed cookies.
** &quot;connect-proxy&quot;:https://github.com/gonsfx/connect-proxy -- Retrieve originating ip/host values when proxying to your connect app
** &quot;minj&quot;:https://github.com/bengourley/minj -- Serve minified javascript files with Connect/Express
** &quot;connect-dojo&quot;:https://github.com/wdavidw/connect-dojo -- Connect middleware exposing the Dojo Toolkit
** &quot;express-chromeframe&quot;:https://github.com/mhemesath/express-chromeframe -- Dead simple middleware to enable chromeframe on connect/express applications.
** &quot;connect-auth&quot;:https://github.com/ciaranj/connect-auth -- Connect authentication middleware, provides out-of-the-box implementations of HTTP (Basic &amp; Digest), Twitter, Facebook, BitBucket, Janrain, Yahoo, Sina, Google, OAuth (1.0 server), Github and a couple of others....
&lt;a name=&quot;wiki-middleware-other&quot;&gt;&lt;/a&gt;
** &quot;everyauth&quot;:https://github.com/bnoguchi/everyauth -- Connect authentication and authorization middleware, modular, configurable, supporting password, OpenId, Google, OAuth, Twitter, LinkedIn, Yahoo, Readability, Dropbox, Justin.tv, Vimeo, Tumblr, OAuth2, Facebook, GitHub, Instagram, Foursquare, Box.net, LDAP
** &quot;passport&quot;:https://github.com/jaredhanson/passport -- Simple, modular, and unobtrusive authentication framework for Connect and Express.
* &quot;Other&quot;:#middleware-other 
** &quot;node-file-cache&quot;:https://github.com/FLYBYME/node-file-cache - Very small file cache for node.js http server.
** &quot;protobuf_for_node&quot;:http://code.google.com/p/protobuf-for-node/ -- In-process JS-to-C++ communication using protocol buffer services
** &quot;socket-logger&quot;:https://github.com/saikat/socket-logger/ -- JSON-parsable logs for Socket.IO that can push log messages to a client over Socket.IO.
** &quot;node-evented&quot;:https://github.com/indutny/node-evented -- Extended EventEmitter
** &quot;http-proxy-selective&quot;:https://github.com/zentooo/node-http-proxy-selective -- Proxy server replace some remote static files with local ones
** &quot;proxy-tamper&quot;:https://github.com/tsyd/proxy-tamper -- A proxy server that allows for the tampering of requests and responses.
** &quot;googleclientlogin&quot;:https://github.com/Ajnasz/GoogleClientLogin -- Log in to Google services using CllientLogin method
** &quot;node-reverse-proxy&quot;:http://www.steve.org.uk/Software/node-reverse-proxy -- A reverse proxy which forwards incoming HTTP requests to multiple back-end HTTP servers based upon HTTP Host header.
** &quot;Node-Http-Rewrite-Proxy&quot;:https://github.com/FlashFan/Node-Http-Rewrite-Proxy -- This module proxies and rewrites HTTP requests of all types. For this you can, if you want, use regular expressions.
** &quot;eventpipe&quot;:http://www.google.com/url?sa=D&amp;q=https://github.com/dhruvbird/eventpipe -- Provides an Event Pipe with the *same* API as node.js&#39; EventEmitter
** &quot;express-twitter&quot;:https://github.com/mahemoff/express-twitter -- Twitter-specific OAuth support
** &quot;http-auth&quot;:https://github.com/gevorg/http-auth -- Node.js package for HTTP basic and digest access authentication.
** &quot;http-auth2&quot;:https://github.com/SDA/http-auth2 -- HTTP basic authentication that supports multiple logins.
** &quot;node-force-domain&quot;:https://github.com/goloroden/node-force-domain -- Force multiple domains to redirect (301) to a default one in your Express project.
** &quot;exedra&quot;:https://github.com/corpix/exedra -- Express routes &amp; functions loader

&lt;a name=&quot;wiki-web-frameworks-other&quot;&gt;&lt;/a&gt;

h4(#web-frameworks-other). &quot;Other&quot;:#web-frameworks-other
* &quot;Alligator&quot;:https://github.com/mrohad/Alligator -- Application Server on top of NodeJS (JSSP and SSJS support)
* &quot;Unlimit&quot;:https://github.com/limeblack/UnlimitJS -- chaining to JavaScript without extending objects&#39; prototypes
* &quot;Nitrode&quot;:https://github.com/ollym/nitrode -- A lightweight, super fast HTTP 1.1 with internal JS API
* &quot;Cluster&quot;:https://github.com/LearnBoost/cluster -- Extensible multi-core server manager (spark successor)
* &quot;Common Node&quot;:https://github.com/olegp/common-node -- Synchronous CommonJS compatibility layer that includes JSGI, jBinary, IO, Filesystem, System and HttpClient modules
* &quot;Connect&quot;:https://github.com/senchalabs/connect -- Middleware framework packed with high quality / performance middleware
* &quot;Spark&quot;:https://github.com/senchalabs/spark -- A command-line tool used to manage node server processes
* &quot;Spark2&quot;:https://github.com/davglass/spark2 -- Fork of &quot;Spark&quot;:https://github.com/senchalabs/spark with some improvements.
* &quot;Stereo&quot;:https://github.com/dvv/stereo -- A simple drop-in multi-core node application controller
* &quot;node-elf-logger&quot;:https://github.com/TooTallNate/node-elf-logger -- Configurable HTTP logging library following the &quot;W3C Extended Log File Format specification&quot;:http://www.w3.org/TR/WD-logfile.html
* &quot;JSGI-Node&quot;:https://github.com/kriszyp/jsgi-node/ -- Asynchronous JSGI 0.3 Adapter for Node, for standards-based middleware
* &quot;node-mime&quot;:https://github.com/bentomas/node-mime -- Utility module for mime-type lookups
* &quot;mime-magic&quot;:https://github.com/SaltwaterC/mime-magic -- Proper MIME type detection library that wraps the libmagic functionality
* &quot;node-cgi&quot;:https://github.com/pufuwozu/node-cgi -- CGI adapter kludge (replaces Node&#39;s fast and famous event-based HTTP library)
* &quot;node.ly&quot;:https://github.com/giacecco/node.ly -- A simple URL shortener (currently not available on GitHub)
* &quot;multi-node&quot;:https://github.com/kriszyp/multi-node -- Launch multiple node processes for HTTP servers
* &quot;node-digest&quot;:https://github.com/wearefractal/node-digest -- HTTP Digest authentication for NodeJS
* &quot;Q-Oper8&quot;:https://github.com/robtweed/Q-Oper8 -- Scalable multi-process manager for Node.js
* &quot;solder&quot;:https://github.com/brettstimmerman/solder -- Combines and minifies JavaScript and CSS at runtime and build time
* &quot;fugue&quot;:https://github.com/pgte/fugue -- Unicorn for Node.js - Multiple node server instance manager with Unicorn-like features
* &quot;what&quot;:https://github.com/entmike/what -- What - A Node.JS Web Container/Application Server
* &quot;mongrel2&quot;:https://github.com/darkhelmet/node-mongrel2 -- mongrel2 - Mongrel2 handler for node
* &quot;node-flags&quot;:https://github.com/dpup/node-flags -- node-flags - Flag handling library
* &quot;zen&quot;:https://github.com/pblabs/zen -- Robust high performance middleware engine
* &quot;js2&quot;:https://github.com/jeffsu/js2 -- Syntactic Sugar and Object Oriented Javascript
&lt;a name=&quot;wiki-database&quot;&gt;&lt;/a&gt;

h3(#database). &quot;Database&quot;:#database

h4(#db-mssql). &quot;SQL Server&quot;:#db-mssql

* &quot;node-mssql&quot;:https://github.com/vivina/node-mssql -- A node.js MS SQL Server native driver 

h4(#db-pg). &quot;Postgresql&quot;:#db-pg

* &quot;node_postgres&quot;:https://github.com/ry/node_postgres -- Beginning of bindings to libpg
* &quot;node-postgres&quot;:https://github.com/brianc/node-postgres -- Well tested libpq binding and pure javascript PostgreSQL client
* &quot;FastLegS&quot;:https://github.com/didit-tech/FastLegS - PostgreSQL ORM on top of node-postgres.
* &quot;postgres-js&quot;:https://github.com/creationix/postgres-js/tree/master -- Postgres protocol implemented in pure JS
* &quot;postgres-js&quot;:https://github.com/aurynn/postgres-js/ -- Fork of postgres-js, adds parameterized queries and prepared statements.

h4(#db-mysql). &quot;MySQL&quot;:#db-mysql

* &quot;db-mysql&quot;:https://github.com/mariano/node-db-mysql/ - Binary driver for MySQL (using libmysql). Part of the &quot;Node.js DB&quot;:http://nodejsdb.org effort
* &quot;node.dbslayer.js&quot;:https://github.com/Guille/node.dbslayer.js/ - Interface to DBSlayer (MySQL)
* &quot;node-poormansmysql&quot;:https://github.com/mscdex/node-poormansmysql -- Asynchronous MySQL driver for node.js using the mysql command-line tool
* &quot;node-mysql&quot;:https://github.com/felixge/node-mysql -- A node.js module implementing the MySQL protocol 
** &quot;node-mysql-pool&quot;:https://github.com/Kijewski/node-mysql-pool -- connection pool for node.js on top of Felix Geisendörfer&#39;s MySQL client node-mysql.
** &quot;node-mysql-cache&quot;:https://github.com/guggero/node-mysql-cache -- MySQL query cache for node.js on top of Felix Geisendörfer&#39;s MySQL client node-mysql.
* &quot;-node-mysql-&quot;:https://github.com/masuidrive/node-mysql -- -Pure JavaScript MySQL async driver- [obsolete]
* &quot;node-mysql-native&quot;:https://github.com/sidorares/nodejs-mysql-native -- Yet another pure JS async driver. Pipelining, prepared statements.
* &quot;node-mysql-libmysqlclient&quot;:https://github.com/Sannis/node-mysql-libmysqlclient -- MySQL asynchronous bindings based on libmysqlclient
** &quot;RDX&quot;:https://github.com/kreetitech/RDX - An object-relational mapper (ORM) for node. Backends: node-mysql-libmysqlclient.
* &quot;node-handlersocket&quot;:https://github.com/koichik/node-handlersocket -- Pure JavaScript client for &quot;HandlerSocket Plugin for MySQL&quot;:https://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL. 
* &quot;persistence.js&quot;:https://github.com/zefhemel/persistencejs -- An object-relational mapper (ORM) for node. Backends: MySQL.
* &quot;sequelize&quot;:https://github.com/sdepold/sequelize - An easy-to-use MySQL Object-Relational-Mapper (ORM) for Node.JS
* &quot;moose&quot;:https://github.com/Pollenware/moose - An ORM for node (Currently only MySQL). Based on node-mysql

h4(#db-sqllite). &quot;Sql Lite&quot;:#db-sqllite

* &quot;node-sqlite&quot;:https://github.com/grumdrig/node-sqlite -- Bindings for SQLite3. Interface conforms to the &quot;HTML5 Web SQL API&quot;:http://dev.w3.org/html5/webdatabase/#sql.
* &quot;node-sqlite&quot;:https://github.com/orlandov/node-sqlite -- Fast asynchronous driver: New evented Node.js look, same great SQLite3 taste
* &quot;node-sqlite3&quot;:https://github.com/developmentseed/node-sqlite3 -- Full-featured, asynchronous SQLite bindings with query serialization/parallelization and verbose stack traces

h4(#db-nosql). &quot;NoSQL and Key Value&quot;:#db-nosql

h5(#db-nosql-mongo). &quot;Mongo&quot;:#db-nosql-mongo

* &quot;mongojs&quot;:https://github.com/gett/mongojs -- Simple driver that emulates the mongodb API as much as possible.
* &quot;node-mongodb&quot;:https://github.com/orlandov/node-mongodb -- Basic MongoDB client implementation in JS/C++
* &quot;node-mongodb-native&quot;:https://github.com/christkv/node-mongodb-native -- A pure JavaScript driver for MongoDB.
** &quot;node-mongoskin&quot;:https://github.com/guileen/node-mongoskin -- A future layer for node-mongodb-native.
** &quot;node-mongodb-wrapper&quot;:https://github.com/idottv/node-mongodb-wrapper -- As close as possible to the command-line driver. Uses node-mongodb-native.
** &quot;mongode&quot;:https://github.com/milewise/mongode -- Very thin wrapper around node-mongodb-native that simplifies the API a bit.
** &quot;N-Ext&quot;:https://github.com/xcambar/n-ext -- Use Ext.data packages in your NodeJS apps (includes a MongoDB proxy based on &quot;node-mongodb-native&quot;:https://github.com/xcambar/n-ext/node-mongodb-native)
** &quot;mongoq&quot;:https://github.com/zzdhidden/mongoq -- MongoDB is: mongoq(&#39;mongodb://localhost/db&#39;).collection(&#39;users&#39;).find().toArray(function(error, docs){})
* &quot;node-mongolian&quot;:https://github.com/marcello3d/node-mongolian -- Mongolian DeadBeef is an awesome Mongo DB node.js driver that attempts to closely approximate the mongodb shell
* &quot;mongolia&quot;:https://github.com/masylum/mongolia -- Flexible wrapper for the nodejs Mongo driver. Lighter than a ORM but easier to use than the driver.
* &quot;mongoose&quot;:http://mongoosejs.com/ -- Mongoose is a JavaScript library that makes working with MongoDB a breeze.
* &quot;mongous&quot;:https://github.com/amark/mongous -- Mongous is a simple MongoDB driver that uses a jQuery styled syntax.
* &quot;nosql-thin&quot;:https://github.com/dmcquay/node-nosql-thin - Makes easier to work with MongoDB. Not an ORM. Not production ready.
* &quot;mongoclikker&quot;:https://github.com/semu/mongoclikker - Simple MongoDB data viewer
* &quot;GridFS&quot;:https://github.com/siddMahen/GridFS - Simple GridFS capabilities built on node-mongodb-native.
* &quot;Official driver&quot;:https://jira.mongodb.org/browse/SERVER-2141 - Vote for it on 10gen&#39;s tracker

h5(#db-nosql-hive). &quot;Hive&quot;:#db-nosql-hive

* &quot;node-hive&quot;:https://github.com/forward/node-hive -- dead simple hive client using thrift api

h5(#db-nosql-redis). &quot;Redis&quot;:#db-nosql-redis

* &quot;redback&quot;:https://github.com/chriso/redback -- a high-level Redis library with support for advanced data structures such as Social Graphs and Full-text Indexes.
* &quot;awesome&quot;:https://github.com/janl/awesome -- a Redis clone in node.js
* &quot;nedis&quot;:https://github.com/visionmedia/nedis -- Redis server implementation written with node
* &quot;redis-node&quot;:https://github.com/bnoguchi/redis-node -- Comprehensive, high speed Redis client
* &quot;redis-node-client&quot;:https://github.com/fictorial/redis-node-client/tree/master -- Redis Client by Fictorial (deprecated)
* &quot;node_redis&quot;:https://github.com/mranney/node_redis/ -- Complete Redis client that works well with new node and new Redis
* &quot;redis2json&quot;:https://github.com/igo/redis2json/ -- Easily loads data from Redis into structured JS object
* &quot;nohm&quot;:https://github.com/maritz/nohm -- Redis object relational mapper (ORM)

h5(#db-nosql-couch). &quot;CouchDB&quot;:#db-nosql-couch

* &quot;node-couchdb-api&quot;:https://github.com/dominicbarnes/node-couchdb-api -- An easy-to-use and powerful wrapper for the CouchDB API that follows Node.JS conventions for async code.
* &quot;LazyBoy&quot;:http://garrensmith.com/LazyBoy -- a CouchDB ORM thats easy to use 
* &quot;node-couch&quot;:https://github.com/sixtus/node-couch/tree/master -- a CouchDB connector
* &quot;-node-couchdb-&quot;:https://github.com/felixge/node-couchdb -- -A full API implementation- [obsolete]
* &quot;node-couchdb-min&quot;:https://github.com/rsms/node-couchdb-min -- Light-weight client with low level of abstraction and connection pooling.
* &quot;couch-ar&quot;:https://github.com/scottburch/couch-ar -- a active record implementation for couchDB (uses cradle)
* &quot;couch-client&quot;:https://github.com/creationix/couch-client -- a simple wrapper around CouchDB&#39;s http interface
* &quot;PJsonCouch&quot;:https://github.com/landeiro/PJsonCouch -- PJs-on-Couch is a client lib for CouchDB&#39;s HTTP API
* &quot;cradle&quot;:https://github.com/cloudhead/cradle -- a high-level, caching, CouchDB client
* &quot;couchcmd&quot;:https://github.com/ssuda/node-couch-cmd -- CouchDB command line utility using cradle
* &quot;data.js&quot;:https://github.com/michael/data/ -- Graph persistence for Node.js with CouchDB
* &quot;couchtato&quot;:https://github.com/cliffano/couchtato/ -- CouchDB document utility tool
* &quot;nano&quot;:https://github.com/dscape/nano/ -- Minimalistic driver for CouchDB based on mikeals/request

h5(#db-nosql-misc). &quot;NoSQL Misc&quot;:#db-nosql-misc

* &quot;riak-js&quot;:https://github.com/frank06/riak-js -- Riak JavaScript client (works on node v0.1.30+)
* &quot;node-mwire&quot;:https://github.com/robtweed/node-mwire -- Client for GT.M &amp; Cache databases
* &quot;alfred&quot;:http://pgte.github.com/alfred/ -- a fast in-process key-value store for node.js that has functional indexes, streams, replication,  ...
* &quot;barricane-db&quot;:https://github.com/chrisdew/barricane-db -- a transparent object persistence mechanism
* &quot;chaos&quot;:https://github.com/stagas/chaos -- Chaos is a Node.js database
* &quot;node-tokyocabinet&quot;:https://github.com/edvakf/node-tokyocabinet -- Tokyo Cabinet binding
* &quot;node-tyrant&quot;:https://github.com/waveto/node-tyrant/tree/master -- An implementation of the Tokyo Tyrant network protocol for the Node.js
* &quot;kyoto-client&quot;:https://github.com/wezm/kyoto-client -- A client for the Kyoto Tycoon key-value store
* &quot;keys&quot;:https://github.com/visionmedia/keys -- Unified interface for key/value store clients
* &quot;neo4j&quot;:https://github.com/gasi/node-neo4j -- Neo4j graph database driver for Node

h4(#db-misc). &quot;DB Misc and Cross DB&quot;:#db-misc

* &quot;db-drizzle&quot;:https://github.com/mariano/node-db-drizzle/ - Binary driver for Drizzle (using libdrizzle). Part of the &quot;Node.js DB&quot;:http://nodejsdb.org effort
* &quot;jugglingdb&quot;:https://github.com/1602/jugglingdb/ - ORM for every database: redis, mysql, neo4j, mongodb, ...
* &quot;JSLINQ&quot;:https://github.com/marak/JSLINQ -- Clean and simple port of Microsoft&#39;s LINQ to node.js (and the browser)
* &quot;nconf&quot;:https://github.com/indexzero/nconf -- A hybrid local / remote configuration storage library
* &quot;node-cask&quot;:https://github.com/randomekek/node-cask -- A 140 loc mmap-ed key/value store, based on bitcask
* &quot;node-dbmon&quot;:https://github.com/straps/node-dbmon -- Database Real-Time Monitoring Library
* &quot;node-dirty&quot;:https://github.com/felixge/node-dirty -- A key value store for node.js that is simple, fast &amp; dirty.
* &quot;node-fleet&quot;:https://github.com/jfd/node-fleet -- a FleetDB Client
* &quot;node-firebird-libfbclient&quot;:https://github.com/xdenser/node-firebird-libfbclient -- Firebird SQL client
* &quot;node-fsdocs&quot;:https://github.com/rsms/node-fsdocs -- Simple, ACID and versioned file system-based document database for quick hacks
* &quot;node-hbase&quot;:https://github.com/wdavidw/node-hbase -- HBase client with full API support through the REST connector
* &quot;node-mdbm&quot;:https://github.com/robtweed/node-mdbm -- a client for GT.M and Cache, using an HTTP interface that is based on SimpleDB
* &quot;node-orm&quot;:https://github.com/dresende/node-orm -- ORM for multiple drivers (MySQL, PostgreSQL, MongoDB)
* &quot;memcached&quot;:https://github.com/3rd-Eden/node-memcached -- Memcached, membase client with support for memcached clusters using consistent hashing.
* &quot;node-memcache&quot;:https://github.com/vanillahsu/node-memcache -- a memcache client base on libmemcached
* &quot;node-dbi&quot;:https://github.com/DrBenton/Node-DBI -- A database abstraction layer, which allows to work with several database engines (MySQL, SQLite) with a single handy API
* &quot;node-tiny&quot;:https://github.com/chjj/node-tiny -- An experimental in-process database similar to nStore.
* &quot;persistence&quot;:https://github.com/creationix/node-persistence -- Multi-backend database/nosql system.  Backends: Sqlite3, Postgres and Memory.
* &quot;perstore&quot;:https://github.com/kriszyp/perstore -- JavaScript persistence/object store with pluggable storage based on the &quot;W3C DB API&quot;:http://www.w3.org/TR/IndexedDB/
* &quot;node-migrate&quot;:https://github.com/rsandor/node-migrate -- Migrate - A database agnostic migration system for Node.js
* &quot;simpledb&quot;:https://github.com/rjrodger/simpledb -- An Amazon AWS SimpleDB library for Node.js that is user-friendly and fault-tolerant
* &quot;node-mdb&quot;:https://github.com/robtweed/node-mdb -- Node.js-based clone of AWS SimpleDB, using GT.M for data storage
* &quot;ueberDB&quot;:https://github.com/Pita/ueberDB -- Transforms every database into a object key value store
* &quot;hive&quot;:https://github.com/Pollenware/hive -- Fast in memory store for Node.
&lt;a name=&quot;wiki-templating&quot;&gt;&lt;/a&gt;
* &quot;nocr-mongo&quot;:https://github.com/karacos/nocr-mongo -- &quot;NoCR&quot;:https://github.com/NoCR/NoCR implementation for mongoDB
* &quot;searchjs&quot;:https://github.com/deitch/searchjs -- Library for doing easy native JSON SQL-style querying on JS objects/arrays. Implements JSQL, native JSON query language. 
* &quot;node-odbc&quot;:https://github.com/w1nk/node-odbc -- unixODBC bindings for node. Query any database that has an ODBC driver.

h3(#templating). &quot;Templating&quot;:#templating
* &quot;asyncEJS&quot;:https://github.com/cramforce/node-asyncEJS -- Asynchronous implementation of embedded JavaScript
* &quot;bake&quot;:https://github.com/pvorb/node-bake -- Templating engine for static files. Supports &quot;ejs&quot;:https://github.com/visionmedia/ejs templates.
* &quot;bind-js&quot;:https://github.com/Xavi-/bind-js -- a simple templating engine for node.js that smiles back.
* &quot;blue&quot;:http://github.com/floby/node-blue -- A streamed template engine. Support for asynchronous loading of partials
* &quot;combyne.js&quot;:https://github.com/tbranyen/combyne.js -- A template engine that hopefully works the way you&#39;d expect.
* &quot;CoffeeKup&quot;:https://github.com/mauricemach/coffeekup -- Markup as CoffeeScript. Live &quot;demo&quot;:http://coffeekup.org and &quot;html2coffeekup&quot;:https://github.com/brandonbloom/html2coffeekup.
* &quot;doT.js&quot;:https://github.com/olado/doT -- Concise and super fast javascript templates with customizable delimiters, streaming and partials support
* &quot;DryKup&quot;:https://github.com/mark-hahn/drykup -- CoffeeKup-compatible markup for CoffeeScript.  Supports closures and requires no compilation.
* &quot;dust&quot;:http://akdubya.github.com/dustjs -- Async, streaming &amp; composable templates for the browser and node
* &quot;Eco&quot;:https://github.com/sstephenson/eco -- Embedded CoffeeScript templates
* &quot;ejs&quot;:https://github.com/visionmedia/ejs -- Light-weight Embedded JavaScript implementation. &quot;Express&quot;:http://expressjs.com compliant
* &quot;haml.js&quot;:https://github.com/visionmedia/haml.js -- Faster / more compliant implementation of Haml. &quot;Express&quot;:http://expressjs.com support
* &quot;haml-js&quot;:https://github.com/creationix/haml-js -- Server side html generation using JavaScript.  Parses haml templates and renders html.
* &quot;jshtml&quot;:https://github.com/LuvDaSun/jshtml -- Clean HTML, full JavaScript template engine. Inspired by the razor view engine used in asp.net mvc.
* &quot;jqtpl&quot;:https://github.com/kof/node-jqtpl -- A port of the new jQuery template engine. &quot;Express&quot;:http://expressjs.com compliant
* &quot;Jade&quot;:https://github.com/visionmedia/jade -- Haml-like template engine, fantastic error reporting, easier to read, higher performance. &quot;Express&quot;:http://expressjs.com compliant
* &quot;jazz&quot;:https://github.com/shinetech/jazz -- A readable template language for node.
* &quot;JinJS&quot;:http://code.ravelsoft.com/node-jinjs -- A port of Jinja, a Django Template-like templating language to Javascript
* &quot;JSON Template&quot;:https://github.com/andychu/json-template -- Minimal but powerful template language with multiple implementations.  This is the CommonJS version, tested on Node
* &quot;jm&quot;:https://github.com/smtlaissezfaire/jm -- Another Builder/Markaby/Erectory clone in JavaScript.
* &quot;jsdom&quot;:https://github.com/tmpvar/jsdom -- pure js implementation of the dom level 1 with some browser augmentation. Level 2 and 3 are being considered.
* &quot;less.js&quot;:https://github.com/cloudhead/less.js -- official port of Less to JavaScript/node.
rendering process.
* &quot;Liquor&quot;:https://github.com/chjj/liquor -- A templating engine minus the code.
* &quot;Lite(LiteXML)&quot;:http://www.xidea.org/lite/doc/ -- A cross platform template engine base on xml/html and javascript expression
* &quot;minimal.js&quot;:https://github.com/ruidlopes/minimal.js -- a fast HTML+JSON template engine (both browser and Node.js compatible)
* &quot;Mu (Mustache)&quot;:https://github.com/raycmorgan/Mu -- A Mustache engine that compiles templates into very fast rendering functions. Also streams the 
* &quot;nTPL&quot;:https://github.com/indutny/nTPL -- Fast &amp; Native extendable template system
* &quot;nodejs-meta-templates&quot;:https://github.com/shimondoodkin/nodejs-meta-templates -- like php mixed with html, processed twice, 1st  static data, 2nd dynamic data.
* &quot;normal-template&quot;:https://github.com/gmosx/normal-template -- Normal templates are simple, yet powerful. They are safe, usable in non XML/HTML contexts and portable to any programming language.
* &quot;nun&quot;:https://github.com/akaspin/nun -- Totally asynchronous non-blocking template engine for node.js
* &quot;node-dom&quot;:https://github.com/github.com/Nais/node-dom -- Javascript fast W3C DOM generation.
* &quot;node.magic_dom&quot;:https://github.com/amix/node.magic_dom -- A DSL for building HTML in node.js, similar to Python&#39;s Stan
* &quot;node-template&quot;:https://github.com/graphnode/node-template -- Fast and light cached templates.
* &quot;node-properties&quot;:https://github.com/theteam/node-properties -- Simple property reader, externalise your configuration through JSON
* &quot;Parrot&quot;:https://github.com/ollym/parrot -- A lightning fast and lightweight templating engine for Node.js (Just 33 LOC!)
* &quot;PURE&quot;:https://github.com/pure/pure -- Unobtrusive Rendering Engine. The HTML view and the JS logic remain strictly separated. Works with jsdom.
* &quot;stencil&quot;:https://github.com/thetalecrafter/stencil -- Renders asynchronous templates shared by server and browser
* &quot;Node-T&quot;:https://github.com/skid/node-t -- A fast django-like templating engine for node.js
* &quot;shift.js&quot;:https://github.com/viatropos/shift.js -- Standard interface to the Node.js template engines.
* &quot;Swig&quot;:https://github.com/paularmstrong/swig -- Fast and powerful Django-style templates for node.js
* &quot;Templ8&quot;:https://github.com/constantology/Templ8 -- A fast, lightweight, yet powerful &amp; feature rich client/ server template engine based on Django style syntax
* &quot;template.node.js&quot;:https://github.com/jazzychad/template.node.js -- A light, fast, cached template module for node.
* &quot;tmpl-node&quot;:https://github.com/jed/tmpl-node -- a feature-rich template module for node.js
* &quot;TwigJS&quot;:https://github.com/fadrizul/twigjs -- A port of PHP template engine (&quot;www.twig-project.org&quot;:http://www.twig-project.org) to Javascript
* &quot;weld&quot;:https://github.com/hij1nx/weld -- unobtrusive. portable. ANTI-TEMPLATING. Weld binds data to markup, and can generate markup based on your data.
* &quot;xmlbuilder.js&quot;:https://github.com/btakita/xmlbuilder.js -- An xml builder in JavaScript inspired by Ruby&#39;s Builder, Markaby, and Erector.
* &quot;xmlbuilder-js&quot;:https://github.com/oozcitak/xmlbuilder-js -- An xml builder for node.js similar to java-xmlbuilder.
* &quot;node-tmpl&quot;:https://github.com/jeromeetienne/node-tmpl -- basic templating system in node.js based on shorttag
* &quot;tob&quot;:https://github.com/shimondoodkin/tob -- Template Observer, allows self-reloading templates with your template engine

&lt;a name=&quot;wiki-css-engines&quot;&gt;&lt;/a&gt;

h3(#css-engines). &quot;CSS Engines&quot;:#css-engines
* &quot;Stylus&quot;:https://github.com/LearnBoost/stylus -- Expressive, dynamic, robust CSS language written by the author of Express, Connect, Jade and more
* &quot;Stylus-Sprite&quot;:https://github.com/andris9/stylus-sprite -- Extension for Stylus to generate sprite images
* &quot;sass.js&quot;:https://github.com/visionmedia/sass.js -- Parses Sass templates and renders css.
* &quot;scss-js&quot;:https://github.com/bmavity/scss-js -- Parses SCSS templates and renders css.
* &quot;carto&quot;:https://github.com/mapbox/carto -- Parses MSS templates and renders XML for &quot;Mapnik&quot;:http://mapnik.org/
* &quot;ccss&quot;:https://github.com/aeosynth/ccss -- Parses a JavaScript object and renders css.
* &quot;less&quot;:https://github.com/cloudhead/less.js -- Parses a LESS template and renders css.
* &quot;csslike&quot;:https://github.com/chjj/csslike -- Parses and compiles CSS, taking into account the most recent www-style proposals.

&lt;a name=&quot;wiki-content-management&quot;&gt;&lt;/a&gt;

h3(#content-management). &quot;Content Management Systems&quot;:#content-management
* &quot;Nodepad&quot;:https://github.com/alexyoung/nodepad -- A nice basic web-based notepad.
* &quot;Calipso&quot;:http://calip.so/?utm_source=nodejs&amp;utm_medium=github&amp;utm_campaign=nodejs -- An express based CMS, very much work in progress.
* &quot;Murray CMS&quot;:https://github.com/thecolorblue/murray-cms -- blog platform using express and mongodb.
* &quot;DocPad&quot;:https://github.com/balupton/docpad -- a static website generator which supports markdown and eco among others
* &quot;FilePad&quot;:https://github.com/balupton/filepad - edit your local files collaboratively in realtime inside the browser, can be used &quot;in conjunction with DocPad&quot;:https://github.com/balupton/docpad/wiki/Tips-&amp;-Tricks
* &quot;NoCR&quot;:https://github.com/NoCR/NoCR - JCR-inspired Content Repository API for Node.js which maps your content model to a tree of nodes and properties. There is a &quot;MongoDB NoCR provider&quot;:https://github.com/karacos/nocr-mongo available
* &quot;reed&quot;:https://github.com/ProjectMoon/reed - A Markdown-based blogging core backed by Redis and the filesystem.
* &quot;MCMS&quot;:https://github.com/olegp/mcms - A Minimal CMS using GitHub flavored Markdown, Mustache templates and the filesystem.

&lt;a name=&quot;wiki-build-and-deployment&quot;&gt;&lt;/a&gt;

h3(#build-and-deployment). &quot;Build and Deployment&quot;:#build-and-deployment
* &quot;asereje&quot;:https://github.com/masylum/asereje -- Bundles and minifies your javascript and css files on demand. Forget about builds, hard deploys and cache forever.
* &quot;dev&quot;:https://github.com/iliakan/node-dev -- Automatically restarts the app when a source-file is modified. Autohooks on new files, so it doesn&#39;t need manual restart at all.
* &quot;forever&quot;:https://github.com/indexzero/forever -- A simple CLI tool for ensuring that a given script runs continuously (i.e. forever)
* &quot;haibu&quot;:https://github.com/nodejitsu/haibu -- a node.js application server - spawn your own node.js clouds, on your own hardware
* &quot;jitsu&quot;:https://github.com/nodejitsu/jitsu -- Flawless command line deployment of your Node.js apps to the cloud
* &quot;nodejs-autorestart&quot;:https://github.com/shimondoodkin/nodejs-autorestart -- It is a way to watch all .js files if they have been changed and to restart nodejs. It allows easy development and stable production.
* &quot;config&quot;:https://github.com/lorenwest/node-config -- Configuration control for production node deployments - npm install config
* &quot;node-config&quot;:https://github.com/ArtS/node-config -- Lightweight configuration engine for Node.js
* &quot;node-dev&quot;:https://github.com/fgnass/node-dev -- Automatically restarts node when a source-file is modified. Displays notifications via Growl.
* &quot;octoploy&quot;:https://github.com/ammmir/octoploy -- GitHub post-receive hook URL handler (execute script on push to repo)
* &quot;run&quot;:https://github.com/DTrejo/run.js -- Rerun your js file whenever there&#39;s a change in the current directory: &lt;code&gt;npm install -g run&lt;/code&gt;, &lt;code&gt;runjs yourcode.js&lt;/code&gt;. Never alt-tab to your terminal again.
* &quot;node-settings&quot;:https://github.com/mgutz/node-settings -- Simple, hierarchical environment-based app settings.
* &quot;Jake&quot;:https://github.com/mde/jake -- JavaScript build tool similar to Make or Rake.
* &quot;muffin.js&quot;:https://github.com/hornairs/muffin -- CoffeeScript compilation, minification, concatenation, copying, growl, and SLOC counting helpers for Cakefiles.
* &quot;Masson&quot;:https://github.com/wdavidw/node-masson -- Build system and rule management similar to tools like Make, Ant or Rake
* &quot;Ready.js&quot;:https://github.com/dsimard/ready.js -- Continuous JavaScript integration using JSLint, Google Compiler, Node.js and Git
* &quot;autolint&quot;:https://github.com/magnars/autolint -- Autolint watches your files for jslint/jshint-errors.
* &quot;ripple&quot;:https://github.com/thrashaholic/ripple -- Dynamic runtime configuration for node.js deployment based on lorenwest&#39;s config.
* &quot;nodemon&quot;:https://github.com/remy/nodemon -- Monitors all source files, restarts node on changes. Command-line usage, code-passive with ignore list.
* &quot;node-linter&quot;:https://github.com/kof/node-linter -- generic lint wrapper for JSLint, closure-linter, closure-compiler, and JavaScript Lint.
* &quot;nib.js&quot;:https://github.com/blambeau/nib.js -- package and minify JavaScript/coffeescript projects to be embedded in the browser as a single .js file 
* &quot;nclosure&quot;:http://gatapia.github.com/nclosure/ -- Compiler, Style Checker, Utility Library, Unit Testing Framework, JSDoc Documentation Tool.  Built on top of Google Closure tools.
* &quot;quickcheck&quot;:https://github.com/mcandre/node-quickcheck -- Port of the Haskell QuickCheck unit testing framework
* &quot;buildr&quot;:https://github.com/balupton/buildr.npm -- Javascript Project Builder, Compresses Images, CSS and JS, Bundles CSS and JS, Checks Javascript, Supports SubPackages/Plugins
* &quot;poly.shell&quot;:https://github.com/dvidelabs/poly.shell -- distributed shell job control with role based configuration
* &quot;inireader&quot;:https://github.com/Ajnasz/IniReader -- Ini file parser
* &quot;doc.md&quot;:https://github.com/Pita/doc.md -- A simple JSDoc documenation tool that creates markdown for node.js modules
* &quot;coffee-conf&quot;:https://github.com/MSNexploder/coffee-conf -- Write your config files in coffee-script.
* &quot;Gittyup&quot;:https://github.com/spiceapps/gittyup -- Application deployment library for node.js
* &quot;npkg&quot;:https://github.com/wearefractal/npkg -- Generates cross-platform installers for Node.js applications
* &quot;envious&quot;:https://github.com/markbao/node-envious -- environment variable configuration that&#39;s too easy to pass up
* &quot;modul8&quot;:https://github.com/clux/modul8 -- Extensible CommonJS browser code sharing
* &quot;coffee-toaster&quot;:https://github.com/serpentem/coffee-toaster -- Minimalist dependency management system for coffee-script. 
* &quot;watch-node&quot;:https://github.com/viatropos/watch-node -- Automatically restart Node.js server when a file changes, recompile JS/CSS. Do anything. Uses Mac FSEvents.

&lt;a name=&quot;wiki-package-management&quot;&gt;&lt;/a&gt;

h3(#package-management). &quot;Package Management Systems&quot;:#package-management
* &quot;npm&quot;:https://github.com/isaacs/npm -- A node package manager that uses CommonJS-compatible package.json files, written in asynchronous JavaScript.
* &quot;nmod&quot;:https://github.com/jeromeetienne/nmod -- nmod is a node_modules manager. able to install from npm and git
* &quot;Ender&quot;:https://github.com/ender-js/ender -- A package manager built on NPM bringing micro to macro to create your own custom JavaScript library by composing modules into a cohesive and familiar interface .
* &quot;Slugr&quot;:https://github.com/spiceapps/slugr -- Wraps node.js apps into a single executable file.
* &quot;npkg&quot;:https://github.com/wearefractal/npkg -- Generates cross-platform installers/executables for Node.js applications
* &quot;Cupboard&quot;:https://github.com/spiceapps/cupboard -- Reverse package manager

&lt;a name=&quot;wiki-module-loader&quot;&gt;&lt;/a&gt;

h3(#module-loader). &quot;Module Loader&quot;:#module-loader
* &quot;nodules&quot;:https://github.com/kriszyp/nodules -- Async URL CommonJS module loader with dep resolution/downloading and hot-module reloading
* &quot;node-DJs&quot;:https://github.com/louisremi/node-DJs - Restart a server after each change in main script and dependencies
* &quot;node-hot-reload&quot;:https://github.com/shimondoodkin/node-hot-reload - watchFile and reload modules dynamically for node.js (very useful for development, less good for production)
* &quot;remap&quot;:https://github.com/dominictarr/remap - reroute require for mocks, wrappers, or shenanigans (useful for testing)
* &quot;a3&quot;:https://github.com/twojcik/a3 -- a3 module loads any folder of code into an &#39;API Tree&#39;
&lt;a name=&quot;wiki-security&quot;&gt;&lt;/a&gt;

h3(#security). &quot;OpenSSL / Crypto / Hashing&quot;:#security
* &quot;node-gpg&quot;:https://github.com/drudge/node-gpg 
* &quot;node-hashring&quot;:https://github.com/3rd-Eden/node-hashring -- Hash ring provides consistent hashing based on the libketema library.
* &quot;packnode&quot;:https://github.com/chriso/packnode -- Obfuscate, minify and/or encrypt JS files
* &quot;hashlib&quot;:https://github.com/brainfucker/hashlib -- Fast hashing module, written in C/C++, supports: md4, md5, md6, sha, sha1, sha256, sha512
* &quot;keygrip&quot;:https://github.com/jed/keygrip -- Key signing and verification for rotated credentials
* &quot;brainfucker&#39;s node-base64&quot;:https://github.com/brainfucker/node-base64 -- C++ base64 lib
* &quot;pkrumins&#39;s node-base64&quot;:https://github.com/pkrumins/node-base64 -- C++ base64 lib that actually works
* &quot;amir&#39;s node-base62&quot;:https://github.com/amir/node-base62 -- C++ base62 lib for representing big numbers
* &quot;node.bcrypt.js&quot;:https://github.com/ncb000gt/node.bcrypt.js -- C/C++ bcrypt lib
* &quot;node-crypto&quot;:https://github.com/waveto/node-crypto -- OpenSSL based Hashing, Signing and Verifying
* &quot;node-oauth&quot;:https://github.com/ciaranj/node-oauth -- OAuth client (1 and 2)
* &quot;oauthjs&quot;:https://github.com/itea/oauthjs -- OAuth client
* &quot;oauth-server&quot;:https://github.com/selead/oauth-server -- OAuth server (1.0A)
* &quot;node-oauth2-provider&quot;:https://github.com/ammmir/node-oauth2-provider -- OAuth 2 provider as Connect/Express middleware with custom token storage hooks
* &quot;node-openid&quot;:https://github.com/havard/node-openid -- OpenID 1.1/2.0 Relying Party (client)
* &quot;pass&quot;:https://github.com/andris9/pass -- Validate/generate Apache htpasswd passwords (for Basic Auth)
* &quot;rbytes&quot;:https://github.com/akdubya/rbytes -- Secure random byte generator for session keys, UUIDs, etc.
* &quot;sasljs&quot;:https://github.com/nikhilm/sasljs -- &quot;Gsasl&quot;:http://www.gnu.org/software/gsasl/ wrapper to performs server-side SASL authentication.
* &quot;sha1&quot;:https://github.com/pvorb/node-sha1 -- Plain JavaScript SHA-1 hashing function
* &quot;node-whirlpool&quot;:https://github.com/Sembiance/node-whirlpool -- C/C++ mhash lib wrapper providing whirlpool hash support
* &quot;NodeJS-Keychain&quot;:https://github.com/aschlosberg/NodeJS-Keychain -- A security-oriented keychain web service
* &quot;node_nibbler&quot;:https://github.com/mattrobenolt/node_nibbler -- Base32/base64 encoder/decoder.
* &quot;node-cityhash&quot;:https://github.com/fbzhong/node-cityhash -- NodeJS bindings for &quot;Google CityHash&quot;:http://code.google.com/p/cityhash/ , both CityHash64 and CityHash128 are supported.
* &quot;node-phpass&quot;:https://github.com/jhurliman/node-phpass -- A pure JavaScript port of the portable PHP password hashing framework.
* &quot;node-sechash&quot;:https://github.com/kbjr/node-sechash -- Secure password hashing using salt and key stretching.
* &quot;murmurhash3&quot;:https://github.com/hideo55/node-murmurhash3 -- Node.js bindings for &quot;MurmurHash3&quot;:http://code.google.com/p/smhasher/wiki/MurmurHash3
* &quot;speakeasy&quot;:https://github.com/markbao/speakeasy -- Easy two-factor authentication. Time-based or counter-based one-time passwords with the HMAC One-Time Password algorithms. Supports Google Authenticator.

&lt;a name=&quot;wiki-smtp&quot;&gt;&lt;/a&gt;

h3(#smtp). &quot;SMTP&quot;:#smtp
* &quot;Haraka&quot;:https://github.com/baudehlo/Haraka -- Full Featured SMTP Server
* &quot;node-smtpclient&quot;:https://github.com/sleeplessinc/node-smtpclient -- Simple SMTP that uses AUTH and TLS/SSL (2.4)
* &quot;node-smtp-client&quot;:https://github.com/miksago/node-smtp-client -- Implementation of the SMTP protocol in Node
* &quot;node-smtp&quot;:https://github.com/aredridel/node-smtp -- Implementation of an SMTP server (and soon, client)
* &quot;node_mailer&quot;:https://github.com/marak/node_mailer -- send emails from node.js to an smtp server, simple as cake 
* &quot;Nodemailer&quot;:https://github.com/andris9/Nodemailer - Easy to use module to send e-mails with Node.JS, unicode friendly
* &quot;emailjs&quot;:https://github.com/eleith/emailjs - send emails, html and attachments from node.js to any smtp server (ex: gmail)
* &quot;node-smtpevent&quot;:https://github.com/euangoddard/node-smtpevent -- Event based SMTP server

&lt;a name=&quot;wiki-tcp&quot;&gt;&lt;/a&gt;

h3(#tcp). &quot;TCP / IP&quot;:#tcp
* &quot;node-httpclient&quot;:https://github.com/billywhizz/node-httpclient -- Node HTTP Client (gzip, https, cookies etc.)
* &quot;node-imap&quot;:https://github.com/mscdex/node-imap -- A module for interacting with IMAP mail servers
* &quot;jsftp&quot;:https://github.com/sergi/jsftp -- A sane, light and concise client implementation of the FTP protocol
* &quot;node-ftp&quot;:https://github.com/mscdex/node-ftp -- An FTP client module for node.js
* &quot;ftp-get&quot;:https://github.com/SaltwaterC/ftp-get -- Simple to use node.js FTP client for downloading remote files
* &quot;node-nntp&quot;:https://github.com/mscdex/node-nntp -- An NNTP (usenet/newsgroups) client module for node.js
* &quot;NodeFTPd&quot;:https://github.com/billywhizz/nodeftpd -- Node FTP Server
* &quot;node-ftpclient&quot;:https://github.com/seanhess/node-ftpclient -- Node FTP Client
* &quot;node-get&quot;:https://github.com/tmcw/node-get -- Moderately higher-level HTTP client library.
* &quot;xmpp.js&quot;:http://xmppjs.prosody.im/ -- Library for implementing XMPP server components with Node
* &quot;node-digest&quot;:https://github.com/wearefractal/node-digest -- HTTP Digest authentication for NodeJS
* &quot;node-http-status&quot;:https://github.com/wdavidw/node-http-status -- Interact with HTTP status code (just a set of constants)
* &quot;request&quot;:https://github.com/mikeal/request -- Simple HTTP client library.
* &quot;open-uri&quot;:https://github.com/publicclass/open-uri -- A very simple HTTP(S)/FTP client library similar to Rubys Open-URI lib.
* &quot;superagent&quot;:https://github.com/visionmedia/superagent -- High-level HTTP client sporting a progressive API
* &quot;fetch&quot;:https://github.com/andris9/fetch -- Fetch urls with ease, supports gzip content, cookies and more
* &quot;node-xmpp&quot;:https://github.com/astro/node-xmpp -- Node XMPP library
* &quot;node-simple-xmpp&quot;:https://github.com/arunoda/node-simple-xmpp -- Simple High Level NodeJS XMPP Client
* &quot;node-snpp&quot;:https://github.com/jsanders/node-snpp -- Node SNPP server library
* &quot;mdns&quot;:https://github.com/agnat/node_mdns -- mdns/zeroconf/bonjour service discovery add-on
* &quot;macaddr&quot;:https://github.com/carter-thaxton/macaddr -- Obtain MAC addresses for current machine from Node
* &quot;n3&quot;:https://github.com/andris9/n3 -- Experimental POP3 server to send arbitrary data to e-mail clients (including e-mails)
* &quot;node-icecast-stack&quot;:https://github.com/TooTallNate/node-icecast-stack -- An interface for connecting to, parsing metadata, and reading from SHOUTcast/Icecast radio streams
* &quot;ndns&quot;:https://github.com/jsjohnst/ndns -- DNS client/server library
* &quot;jsDAV&quot;:https://github.com/mikedeboer/jsdav -- jsDAV allows you to easily add WebDAV and CalDAV support to a NodeJS application. jsDAV is meant to cover the entire standard, and attempts to allow integration using an easy to understand API.
* &quot;wake_on_lan&quot;:https://github.com/agnat/node_wake_on_lan -- Generate and send Wake-on-LAN magic packets
* &quot;node-tld&quot;:https://github.com/donpark/node-tld -- for working with TLD data (registered domain name, etc)
* &quot;NodeSSH&quot;:https://github.com/FlashFan/NodeSSH -- a lightweight SSH client
* &quot;node-xmpp-bosh&quot;:http://code.google.com/p/node-xmpp-bosh/ -- An XMPP BOSH server running on node.js
* &quot;node-snmp&quot;:https://github.com/huancz/node-snmp/ -- SNMP v1 client
* &quot;node-socksified&quot;:https://github.com/vially/node-socksified -- HTTP SOCKS5 proxy support
* &quot;http-sync&quot;:https://github.com/dhruvbird/http-sync -- Synchronous http(s) client
* &quot;http-get&quot;:https://github.com/SaltwaterC/http-get -- Simple to use node.js HTTP / HTTPS client for downloading remote files. Supports transparent gzip decoding.
* &quot;portscanner&quot;:https://github.com/baalexander/node-portscanner -- An asynchronous port scanner for Node.js
* &quot;node-poplib&quot;:https://github.com/ditesh/node-poplib -- POP3 client library for Node.js
* &quot;node-ping&quot;:https://github.com/c0d3x42/node-ping -- Simple wrapper around fping 
* &quot;multiparter&quot;:https://github.com/Sonetica/multiparter -- multipart/form-data POST request maker for Node.js with support for streams (sending files) and plain params

h3(#rpc). &quot;RPC&quot;:#rpc
* &quot;nodeQuery&quot;:https://github.com/tblobaum/nodeQuery -- nQuery.js lets you create, edit, update or delete the DOM in real-time using jQuery/Zepto style code written on the server
* &quot;nowjs&quot;:https://github.com/flotype/now -- nowjs makes realtime web apps really easy (http://nowjs.com)
* &quot;rpc-socket&quot;:https://github.com/FLYBYME/rpc-socket -- Multi socket support for JSON-RPC NOTE: still under development.
* &quot;bertrpc&quot;:https://github.com/rtomayko/node-bertrpc
* &quot;jsonrpc&quot;:https://github.com/ericflo/node-jsonrpc
* &quot;xmlrpc&quot;:https://github.com/baalexander/node-xmlrpc -- A pure JavaScript XML-RPC server and client
* &quot;dnode&quot;:https://github.com/substack/dnode -- Asynchronous remote method calls with transparently wrapped callbacks. Works with regular network streams or socket.io.
* &quot;node-jsonrpc&quot;:https://github.com/andris9/node-jsonrpc -- Another JSON-RPC server
* &quot;jsonrpc2&quot;:https://github.com/Philipp15b/node-jsonrpc2 -- A super easy to use JSON-RPC v2 server
* &quot;IPCNode&quot;:https://github.com/Frans-Willem/IPCNode -- Asynchronous RPC library based on node.js Stream object,  with support for circular objects, and explicit reference counting to ensure proper garbage collection.
* &quot;msgpack-rpc&quot;:https://github.com/bpot/node-msgpack-rpc -- Implementation of Msgpack-RPC (http://msgpack.org)
* &quot;node-ipcbuffer&quot;:https://github.com/dazhazit/node-ipcbuffer -- A modified Buffer object to pass large amounts of data between processes using POSIX or System V IPC shared memory and or do fast read and writes to files. (Windows soon).
* &quot;node-pingback&quot;:https://github.com/chjj/node-pingback -- Pingbacks for node.js, conforming to the pingback and xml-rpc spec.
* &quot;node-soap&quot;:https://github.com/milewise/node-soap -- SOAP client and service (partial support).
* &quot;nodejs-light_rpc&quot;:https://github.com/romulka/nodejs-light_rpc -- Simple server/client RPC, with minimal dependencies (uuid (can be removed to use simple increment)).
* &quot;zeromq.node&quot;:https://github.com/JustinTulloss/zeromq.node -- 0MQ (zeroMQ) bindings for node.js

&lt;a name=&quot;wiki-ws-ajax&quot;&gt;&lt;/a&gt;

h3(#ws-ajax). &quot;Web Sockets &amp; Ajax&quot;:#ws-ajax
* &quot;Abstract HTTP Request&quot;:https://github.com/coolaj86/abstract-http-request -- An HTTP Client wrapper for the browser (XHR) and node.js (http module)
* &quot;Comet LongPollingBuffer&quot;:https://github.com/robrighter/Long-Polling-Buffer -- A Library to simplify the server side of Comet AJAX long polling
* &quot;Faye&quot;:https://github.com/jcoglan/faye -- Bayeux protocol Comet client and server for Node.js and Rack
* &quot;Minotaur&quot;:https://github.com/yojimbo87/minotaur -- Long poll server using JSONP communication with clients
* &quot;Socket.io&quot;:https://github.com/LearnBoost/Socket.IO -- WebSocket-compatible server and client with fallback for legacy browsers
* &quot;node-rpc-socket.io&quot;:https://github.com/Tronix117/node-rpc-socket.io -- socket.io addon, add a full client/server implementation of JSON-RPC
* &quot;node-socket.io-client&quot;:https://github.com/saschagehlich/node-socket.io-client -- Node.js implementation of the Socket.IO client libraries
* &quot;node-XMLHttpRequest&quot;:https://github.com/driverdan/node-XMLHttpRequest
* &quot;node.websocket.js&quot;:https://github.com/Guille/node.websocket.js -- WebSocket-compatible server.
* &quot;node.ws.js&quot;:https://github.com/ncr/node.ws.js -- A basic Web Socket server with interface similar to tcp.createServer(...)
* &quot;nodejs-http-websocket&quot;:https://github.com/zimbatm/nodejs-http-websocket -- A websocket server on top of the http server.
* &quot;node-websocket-server&quot;:https://github.com/miksago/node-websocket-server -- Another websocket server on top of the http server.
* &quot;Restler&quot;:https://github.com/danwrong/restler -- Simplified REST client for Node.js
* &quot;node-websocket-client&quot;:https://github.com/pgriess/node-websocket-client -- An HTML5 Web Socket client.
* &quot;node2node-socket.io&quot;:https://github.com/dotmaster/node2node-socket.io -- A node2node transport and client for socket.io .
* &quot;Reston&quot;:https://github.com/maxpert/Reston -- REST client with multipart support and friendly API
* &quot;tunguska&quot;:https://github.com/kriszyp/tunguska -- A comet publish/subscribe distributed hub (runs across multiple node instances).
* &quot;grappler&quot;:https://github.com/mscdex/grappler -- A minimalistic server for handling &quot;comet&quot; connections that supports a variety of connection methods.
* &quot;spacesocket&quot;:https://github.com/astro/spacesocket -- WebSocket server not invented here
* &quot;Weasel&quot;:https://github.com/hackfrag/Weasel -- a command based websocket application framework
* &quot;node-wwwdude&quot;:https://github.com/pfleidi/node-wwwdude -- A simplified, flexible HTTP/REST client library for node.js
* &quot;node-bus&quot;:https://github.com/node-bus/node-bus -- A distributed pubsub engine for JSON-based events
* &quot;wave-node&quot;:https://github.com/scottbw/wave-node -- An implementation of the Google Wave Gadget API for node.js
* &quot;node-object-sync&quot;:https://github.com/jonashuckestein/node-object-sync -- Transparently synchronize objects across connected clients
* &quot;easywebsocket&quot;:https://github.com/jeromeetienne/EasyWebsocket -- WebSocket to broadcast messages to webpages
* &quot;websocket-node&quot;:https://github.com/Worlize/WebSocket-Node -- A WebSocket library that tracks the latest protocol draft versions released by the IETF HyBi working group, currently protocol version 8 (draft -08, -09, and -10).  Mainstream browsers do not yet support this draft of the protocol.
* &quot;Beseda&quot;:https://github.com/geometria-lab/Beseda -- Fast, well designed and featured Node.js Pub/Sub server. Beseda offers multiple platform API to develop realtime web applications.
* &quot;node-eventstream&quot;:https://github.com/kbjr/node-eventstream -- A server-side companion to EventSource.

&lt;a name=&quot;wiki-message-queue&quot;&gt;&lt;/a&gt;

h3(#message-queue). &quot;Message Queues&quot;:#message-queue
* &quot;gearman-node&quot;:https://github.com/cramerdev/gearman-node -- &quot;Gearman&quot;:http://gearman.org/ client.
* &quot;gearnode&quot;:https://github.com/andris9/gearnode -- &quot;Gearman&quot;:http://gearman.org/ client and worker.
* &quot;websocket.MQ&quot;:https://github.com/networkimprov/websocket.MQ -- Reliable message queue server accessible via websockets, socket.IO, etc
* &quot;Wormhole&quot;:https://github.com/aikar/wormhole -- Fast/High Performance message queue system using streaming deserialization with the MessagePack format.
* &quot;rabbit.js&quot;:https://github.com/squaremo/rabbit.js -- Idiomatic messaging using RabbitMQ from node.js

&lt;a name=&quot;wiki-class-system&quot;&gt;&lt;/a&gt;

h3(#class-system). &quot;Class systems&quot;:#class-system
* &quot;joose&quot;:https://github.com/joose/joose -- complete modern class system for JavaScript, based on concepts from many programming languages
* &quot;Klass&quot;:https://github.com/kitgoncharov/klass -- An expressive, cross platform JavaScript Class provider with a slick, classical interface to prototypal inheritance. Includes extends, implements, and the ability to call super classes/methods
* &quot;mootools.js&quot;:https://github.com/stanislavfeldman/mootools.js -- MooTools latest server library as npm package for node.js
* &quot;class-js&quot;:https://github.com/bnoguchi/class-js -- Simple, Light-weight OO Class factory
* &quot;Sslac&quot;:https://github.com/jakobo/sslac -- Basic OOP-like support in JavaScript using chaining. Supports extension, interfaces, namespacing, and static objects.
* &quot;comb&quot;:https://github.com/Pollenware/comb -- Library with a built in OO class system, and other features(datastructures, array string and date utilities, etc..).
* &quot;JS.Class&quot;:https://github.com/daffl/JS.Class -- A class framework based on John Resig&#39;s Simple JavaScript inheritance and JavaScriptMVC $.Class.
* &quot;Structr&quot;:https://github.com/spiceapps/structr -- Library built to give JavaScript the same look and feel as other popular languages such as Java. 
* &quot;N-Ext&quot;:https://github.com/xcambar/n-ext -- Use the power of the Ext.data packages (from the ExtJS framework) in your NodeJS apps. Includes a MongoDB proxy based on &quot;node-mongodb-native&quot;:https://github.com/xcambar/n-ext/node-mongodb-native)

&lt;a name=&quot;wiki-testing&quot;&gt;&lt;/a&gt;

h3(#testing). &quot;Testing / Spec Frameworks&quot;:#testing
* &quot;API Easy&quot;:http://flatiron.github.com/api-easy/ -- Fluent (chainable) syntax for generating Vows tests against any RESTful API. 
* &quot;Benchmark.js&quot;:https://github.com/bestiejs/benchmark.js -- A benchmarking library that works on nearly all JavaScript platforms, supports high-resolution timers, and returns statistically significant results.
* &quot;Cucumber&quot;:https://github.com/cucumber/cucumber-js -- The official JavaScript implementation of the well-known BDD tool. Runs both on Node.js and browsers.
* &quot;cucumis&quot;:https://github.com/noblesamurai/cucumis -- A &quot;cucumber nodejs&quot;:https://github.com/noblesamurai/cucumis implementation. Run plain text gherkin stories with full asynchronous support in native node.js JavaScript.
* &quot;Cup of Tea?&quot;:https://github.com/refractalize/cupoftea -- BBD-style Unit Testing for Async apps.
* &quot;databasecleaner&quot;:https://github.com/emerleite/node-database-cleaner -- Clean your database after each test. Supports MongoDB, Redis and CouchDB. Will support MySQL and others.
* &quot;ensure&quot;:https://github.com/dscape/ensure -- nodejs testing made easy with vows or node-tap
* &quot;Gently&quot;:https://github.com/felixge/node-gently -- A node.js module that helps with mocking and behavior verification.
* &quot;gherkin&quot;:https://github.com/cucumber/gherkin -- A fast Gherkin parser in Ragel (The parser behind Cucumber)
* &quot;espionage&quot;:https://github.com/smtlaissezfaire/espionage -- A mock/stub framework using the test spy pattern.
* &quot;expresso&quot;:https://github.com/visionmedia/expresso -- TDD framework by the author of &quot;JSpec&quot;:http://jspec.info
* &quot;exemplor.js&quot;:https://github.com/chrislloyd/exemplor.js -- A port of &quot;exemplor&quot;:https://github.com/quackingduck/exemplor with Node goodness.
* &quot;fakeweb&quot;:https://github.com/ctide/fakeweb -- A port of &quot;fakeweb&quot;:https://github.com/chrisk/fakeweb that fakes out requests made via Mikeal&#39;s request module, or the standard HTTP module.
* &quot;foounit&quot;:https://github.com/foobarfighter/foounit -- client/server side BDD testing framework 
* &quot;httpmock&quot;:https://github.com/bbyars/httpmock -- A RESTful web API for stubbing out network dependencies.
* &quot;horaa&quot;:https://github.com/arunoda/horaa -- Mocking NodeJS Modules
* &quot;jasmine-node&quot;:https://github.com/mhevery/jasmine-node -- integration with &quot;Pivotal&#39;s Jasmine Spec&quot;:https://github.com/pivotal/jasmine framework
* &quot;jasmine-jquery&quot;:https://github.com/dkastner/node-jasmine-jquery -- jQuery matchers and fixture loader for Jasmine framework for node forked from &quot;Jasmine-Jquery&quot;:https://github.com/velesin/jasmine-jquery
* &quot;jessie&quot;:https://github.com/futuresimple/jessie -- Node runner for Jasmine JavaScript BDD testing framework
* &quot;Jody&quot;:https://github.com/garrensmith/Jody -- A descriptive BDD Testing framework 
* &quot;JUTE&quot;:https://github.com/zzo/JUTE -- A JS testing environment with built in code coverage support for Capture/Selenium/V8 backends
* &quot;jspec&quot;:https://github.com/visionmedia/jspec -- Feature Rich BDD Testing Framework (no longer supported)
* &quot;kyuri&quot;:https://github.com/nodejitsu/kyuri -- A node.js cucumber implementation with a few extra asynchronous keywords. supports 160+ languages and exports to VowsJS stubs
* &quot;maryjane&quot;:https://github.com/dhasenan/maryjane/ -- Mock object library inspired by Mockito
* &quot;minitest.js&quot;:https://github.com/botanicus/minitest.js -- Light-weight &amp; simple testing framework designed specially for testing asynchronous code.
* &quot;mjsunit.runner&quot;:https://github.com/tmpvar/mjsunit.runner -- Command line mjsunit runner which provides an easy way to hook into mjsunit and start running tests immediately.
* &quot;nock&quot;:https://github.com/pgte/nock -- HTTP mocking and expectations library.
* &quot;node-assert-extras&quot;:http://gitorious.org/node-assert-extras -- Additional high level asserts
* &quot;node-assertthat&quot;:https://github.com/goloroden/node-assertthat -- Provides a fluent TDD style for Node.js: assert.that(actual, is.equalTo(expected));
* &quot;node-async-testing&quot;:http://bentomas.github.com/node-async-testing/ -- Simple, fast, extendable unit testing.  
* &quot;node-qunit&quot;:https://github.com/kof/node-qunit -- QUnit port for nodejs. Very simple API, async testing, good tested testing framework.
* &quot;node-stories&quot;:https://github.com/tobiassvn/node-stories -- Given/When/Then integration awesomeness for Node.
* &quot;node-testy&quot;:https://github.com/leetreveil/node-testy -- Super simple testing script. No added sugar. 100~ LOC.
* &quot;nodemock&quot;:https://github.com/arunoda/nodemock -- Simple Yet Powerful Mocking Framework for NodeJs
* &quot;nodeunit&quot;:https://github.com/caolan/nodeunit -- Simple syntax, powerful tools. Based on the assert module. Available for node.js and the browser!
* &quot;patr&quot;:https://github.com/kriszyp/patr -- Promise-based asynchronous test runner: lightweight &amp; simple.
* &quot;pit&quot;:https://github.com/akaspin/pit -- Simple drop-in test runner with optional control tools
* &quot;reut&quot;:https://github.com/5long/reut -- Heavyweight unit testing framework.
* &quot;should&quot;:https://github.com/visionmedia/should.js -- expressive test framework agnostic BDD-style assertions
* &quot;sinon&quot;:https://github.com/cjohansen/sinon.js -- JavaScript test spies, stubs and mocks for Node.js and the browser
* &quot;spectacular&quot;:https://github.com/jcrosby/spectacular -- for testing
* &quot;Soda&quot;:https://github.com/LearnBoost/soda -- Selenium Node.JS adapter
* &quot;soda-runner&quot;:https://github.com/doug-martin/soda-runner -- Provides a command line interface, runner, and selenium ide adapter for for soda.
* &quot;Speks&quot;:https://github.com/ecavazos/speks -- A specification framework for your node-code
* &quot;TestIt&quot;:http://github.com/DouglasMeyer/test_it -- Light-weight yet complete, shoulda style testing framework for in-browser and node.js tests.
* &quot;TestNode&quot;:http://github.com/testnode/testnode -- Unobtrusive BDD-style testing framework
* &quot;testosterone&quot;:https://github.com/masylum/testosterone -- Virile testing for http servers or any nodejs application.
* &quot;Tobi&quot;:https://github.com/LearnBoost/tobi -- Expressive server-side functional testing with jQuery.
* &quot;twerp&quot;:https://github.com/philjackson/twerp -- Simple test framework which is suited to Coffeescript users. Synchronous, simple and easy. 
* &quot;uubench&quot;:https://github.com/akdubya/uubench -- A tiny asynchronous JavaScript benchmarking library
* &quot;vbench&quot;:https://github.com/visionmedia/vbench -- tiny visual benchmarking library powered by uubench and node-canvas
* &quot;Vows&quot;:https://github.com/cloudhead/vows -- asynchronous behaviour-driven development for node.js 
* &quot;whiskey&quot;:https://github.com/cloudkick/whiskey -- A simple test runner for NodeJS applications.
* &quot;yeti&quot;:https://github.com/yui/yeti -- The YUI Easy Testing Interface: run browser JS unit tests from the command line!
* &quot;zap&quot;:https://github.com/nornagon/node-zap -- a tiny testing tool for node.js
* &quot;zombie.js&quot;:https://github.com/assaf/zombie -- Insanely fast, full-stack, headless testing using node.js

&lt;a name=&quot;wiki-wrappers&quot;&gt;&lt;/a&gt;

h3(#wrappers). &quot;Wrappers&quot;:#wrappers
* &quot;bdog-node&quot;:https://github.com/blackdog66/bdog-node -- haXe wrappers for node.
* &quot;bdog-redis&quot;:https://github.com/blackdog66/bdog-redis -- haXe wrappers for Fictorial&#39;s redis client
* &quot;bdog-gtk&quot;:https://github.com/blackdog66/bdog-gtk -- haXe wrappers for node and Gtk-Server
* &quot;bdog-pstore&quot;:https://github.com/blackdog66/bdog-pstore -- haXe object server using bdog-node and bdog-redis
* &quot;bdog-mongo&quot;:https://github.com/blackdog66/bdog-mongo -- haXe wrappers for native-mongo driver
* &quot;SQLiteHaxeWrapper&quot;:https://github.com/tommedema/NodeSQLiteHaxeWrapper -- haXe wrappers for Orlandov&#39;s SQLite high level driver
* &quot;hxnodejs&quot;:https://github.com/tong/hxnodejs -- another haXe wrappers for node



&lt;a name=&quot;wiki-parsers&quot;&gt;&lt;/a&gt;

h3(#parsers). &quot;Parsers&quot;:#parsers

&lt;a name=&quot;wiki-parsers-json&quot;&gt;&lt;/a&gt;

h4(#parsers). &quot;JSON&quot;:#parsers-json
* &quot;JSON.js&quot;:http://www.json.org/js.html -- easy to use but synchronous, built-in to V8 (no need to @require@)
* &quot;benejson&quot;:https://github.com/codehero/benejson -- Includes pure JavaScript incremental JSON parser
* &quot;json-streams&quot;:http://github.com/floby/node-json-streams -- Streamed JSON parser and stringifier
* &quot;jsonsp&quot;:https://github.com/jaredhanson/node-jsonsp -- JSON stream parser for Node.js.
* &quot;node-yajl&quot;:http://github.com/vibornoff/node-yajl -- SAX-like evented JSON stream parser using &quot;yajl&quot;:http://lloyd.github.com/yajl version 2 (fork of &quot;yajl-js&quot;:http://bitbucket.org/nikhilm/yajl-js)
* &quot;yajl-js&quot;:http://bitbucket.org/nikhilm/yajl-js -- SAX-like evented JSON parsing using &quot;yajl&quot;:http://lloyd.github.com/yajl


&lt;a name=&quot;wiki-parsers-xml&quot;&gt;&lt;/a&gt;

h4(#parsers-xml). &quot;XML&quot;:#parsers-xml
* &quot;node-o3-xml&quot;:https://github.com/ajaxorg/node-o3-xml -- W3C Standard based XML DOM with XPath and namespaces. Built on libxml2
* &quot;node-o3-fastxml&quot;:https://github.com/ajaxorg/node-o3-fastxml -- W3C Standards based XML DOM based on fastest xml parser in the world pugiXML
* &quot;libxmljs&quot;:https://github.com/polotek/libxmljs -- Bindings to libxml2
* &quot;node-xml&quot;:https://github.com/robrighter/node-xml -- An xml parser for node.js. (The github page for this module is showing some severe performance issues. Not recommended as an &quot;out of the box&quot; solution.)
* &quot;sax-js&quot;:https://github.com/isaacs/sax-js -- SAX-like parser in pure JS
* &quot;dom-js&quot;:https://github.com/teknopaul/dom-js -- A pure JS XML DOM based on sax-js
* &quot;node-expat&quot;:https://github.com/astro/node-expat -- Fast SAX parser binding to expat
* &quot;node-expat&quot;:https://github.com/shimondoodkin/node-expat -- a fork of Fast SAX parser binding to expat, also includes XML to JavaScript object converter
* &quot;node-xml2js&quot;:https://github.com/Leonidas-from-XIV/node-xml2js/ -- Simple XML to JavaScript object converter.
* &quot;libxml-to-js&quot;:https://github.com/SaltwaterC/libxml-to-js -- XML to JavaScript object converter based on libxmljs.
* &quot;node-plist&quot;:https://github.com/TooTallNate/node-plist -- Apple Plist parser for NodeJS. Convert a Plist file or string into a native JS object.
* &quot;node-halfstreamxml&quot;:https://github.com/thejh/node-halfstreamxml -- sax-js based, filter out nodes (with attributes and child nodes) from an xml stream by name
* &quot;xml2json&quot;:https://github.com/buglabs/node-xml2json -- Simple SAX based XML to JSON parser. It uses node-expat.
* &quot;xml-stream&quot;:https://github.com/assistunion/xml-stream -- XML stream parser and editor, based on node-expat.

&lt;a name=&quot;wiki-parsers-commandline&quot;&gt;&lt;/a&gt;

h4(#parsers-commandline). &quot;Command Line Option Parsers&quot;:#parsers-commandline
* &quot;cli&quot;:https://github.com/chriso/cli -- Rapidly build command line apps. Full featured opts/args parser + plugin support
* &quot;commander.js&quot;:https://github.com/visionmedia/commander.js -- The complete solution for nodejs command-line interfaces
* &quot;argsparser&quot;:https://github.com/kof/node-argsparser -- A tiny limited arguments parser, returns a hash.
* &quot;optimist&quot;:https://github.com/substack/node-optimist -- Light-weight option parsing without optstrings or any of that silliness. It&#39;s just a hash!
* &quot;optparse-js&quot;:https://github.com/jfd/optparse-js/tree/master -- Option Parser in JS
* &quot;parseopt&quot;:http://bitbucket.org/panzi/javascript-utils/src/tip/parseopt/ -- Flexible and extensible option parser in JavaScript.
* &quot;trollopjs&quot;:https://github.com/bentomas/trollopjs -- Another option parser
* &quot;js-opts&quot;:http://www.bitbucket.org/mazzarelli/js-opts/ -- Another simple command line option parser, easily installed via NPM
* &quot;node-arguments&quot;:https://github.com/fczuardi/node-arguments -- Yet another simple command line option parser
* &quot;nomnom&quot;:https://github.com/harthur/nomnom -- Option parser with generated usage, support for callbacks and commands.
* &quot;tav&quot;:https://github.com/akaspin/tav -- Brain-free command-line options parser for node.js
* &quot;Operetta&quot;:https://github.com/tricknik/node-operetta -- A Node Option Parser That Sings!
* &quot;yanop&quot;:https://github.com/frodwith/yanop -- Yet Another Node Option Parser
* &quot;options.js&quot;:http://valeriu.palos.ro/1026/command-line-option-parser-in-javascript/ -- An inline (non-module!) options parser that is very small and yet quite complete.
* &quot;celeri.js&quot;:https://github.com/spiceapps/celeri -- Complete command line interfaces lib for node.js

&lt;a name=&quot;wiki-parser-generators&quot;&gt;&lt;/a&gt;

h4(#parser-generators).  &quot;Parser Generators&quot;:#parser-generators
* &quot;2kenizer&quot;:https://github.com/LuvDaSun/2kenizer -- It streams, it caches and it&#39;s simple, it matches RegExp&#39;s and strings.
* &quot;bnf&quot;:https://github.com/navstev0/nodebnf -- BNF parser, compiler, and interpreter framework.
* &quot;canopy&quot;:https://github.com/jcoglan/canopy -- PEG parser compiler for JavaScript
* &quot;jison&quot;:https://github.com/zaach/jison -- A parser generator written in JavaScript; similar to Bison for C
* &quot;PEG.js&quot;:http://pegjs.majda.cz/ -- Parser Generator for JavaScript
* &quot;language.js&quot;:http://languagejs.com/ -- A fast PEG parser generator with first class errors and reasonable sized output
* &quot;PanPG&quot;:http://boshi.inimino.org/3box/PanPG/about.html -- A PEG Packrat Parser Generator for JavaScript
* &quot;jparse&quot;:https://github.com/doublec/jsparse -- A parser combinator for JavaScript based on Packrat parsers and Parsing expression grammars
* &quot;ReParse&quot;:https://github.com/weaver/ReParse -- A parser combinator library for JavaScript like Haskell&#39;s Parsec
* &quot;OMeta JavaScript compiler&quot;:http://tinlizzie.org/ometa-js/#JavaScript_Compiler
* &quot;tokenizer&quot;:http://github.com/floby/node-tokenizer -- A regex-based and streamed tokenizer
* &quot;parser&quot;:http://github.com/floby/node-parser -- A general purpose parser that feeds on tokens (see &quot;tokenizer&quot;:http://github.com/floby/node-tokenizer)
* &quot;JSCC-NODE&quot;:http://github.com/badlee/JSCC-NODE -- The Best and The first parser generator written in JavaScript; Use a regular expression-based lexical analyzer generator and a LALR parser generator for building a stand-alone, working parser.

&lt;a name=&quot;wiki-parsers-other&quot;&gt;&lt;/a&gt;

h4(#parsers-other). &quot;Other Parsers&quot;:#parsers-other
* &quot;groan&quot;:https://github.com/mscdex/groan -- A PHP session file parser
* &quot;tldextract&quot;:https://github.com/masylum/tldextract -- Extract domain, subdomain and tld from a url.
* &quot;mingy&quot;:https://github.com/mcantelon/node-mingy -- Command parser for CLI tool and adventure game needs. Works well with the optimist module.
* &quot;node-rdf2json&quot;:https://github.com/baxtree/node-rdf2json -- A simple RDF/XML to JSON converter
* &quot;node-brainfuck&quot;:https://github.com/masylum/node-brainfuck -- Brainfuck interpreter
* &quot;node-discount&quot;:https://github.com/visionmedia/node-discount -- C markdown parser &quot;discount&quot; bindings
* &quot;node-csv&quot;:https://github.com/voodootikigod/node-csv -- Efficient Evented CSV Parsing.
* &quot;ya-csv&quot;:https://github.com/koles/ya-csv -- Evented CSV parser and writer with configurable separator, escape and quote characters
* &quot;lastname&quot;:https://github.com/selead/lastname -- Parse text and search persons by names and surnames. Only at russian for now.
* &quot;node-csv-parser&quot;:https://github.com/wdavidw/node-csv-parser -- Full featured CSV parser with simple api and tested against large datasets.
* &quot;querystring.node.js&quot;:https://github.com/jazzychad/querystring.node.js -- Robust query string parsing for node.
* &quot;node-htmlparser&quot;:https://github.com/tautologistics/node-htmlparser -- Forgiving HTML Parser in JS for both Node and Browsers
* &quot;node-useragent&quot;:https://github.com/3rd-Eden/useragent -- User agent string parser with accurate browser versioning and grouping
* &quot;node-jspack&quot;:https://github.com/pgriess/node-jspack -- JavaScript library to pack ints, floats, etc. to octet arrays representing C data structures
* &quot;node-msgpack&quot;:https://github.com/pgriess/node-msgpack -- Bindings for MessagePack, space-efficient object serialization library
* &quot;node-rfb&quot;:https://github.com/substack/node-rfb -- Parse the RFB protocol used by VNC
* &quot;node-bufferlist&quot;:https://github.com/substack/node-bufferlist -- Create linked lists of buffers and asynchronously parse binary data from these lists
* &quot;node-netstring&quot;:https://github.com/pgriess/node-netstring -- Read and write &quot;netstrings&quot;:http://cr.yp.to/proto/netstrings.txt
* &quot;apricot&quot;:https://github.com/silentrob/Apricot -- Hpricot inspired clone, JSDom with Sizzle Selector engine and XUI for HTML augmentation
* &quot;node-crawler&quot;:https://github.com/joshfire/node-crawler -- Web crawler/spider with JSDom, jQuery &amp; connection pooling.
* &quot;node-strtok&quot;:https://github.com/pgriess/node-strtok -- A streaming tokenizer library for binary data
* &quot;omcc&quot;:https://github.com/tristanls/ometa-js-node -- A command line tool for Alessandro Warth&#39;s OMetaJS
* &quot;ometa-js&quot;:https://github.com/bmavity/ometa-js , &quot;ometajs&quot;:https://github.com/veged/ometa-js -- A JavaScript OMeta implementation
* &quot;Platform.js&quot;:https://github.com/bestiejs/platform.js/ -- A platform detection and user agent parsing library that works on nearly all JavaScript platforms
* &quot;props&quot;:https://github.com/pvorb/node-props -- Parse json or yaml from the beginning of text files.
* &quot;protobuf_for_node&quot;:http://code.google.com/p/protobuf-for-node/ -- Protocol buffer parsing and serialization
* &quot;node-markdown&quot;:https://github.com/andris9/node-markdown -- Easy to use Markdown parser
* &quot;highlight&quot;:https://github.com/andris9/highlight -- Code highlighter for Markdown &lt;code&gt; blocks and for automatic language detection
* &quot;strscan&quot;:https://github.com/sstephenson/strscan-js -- Simple string tokenizer for lexical scanning operations
* &quot;iniparser&quot;:https://github.com/shockie/node-iniparser -- A Simple .ini parser 
* &quot;mailparser&quot;:https://github.com/andris9/mailparser -- Parse mime encoded e-mails into structured objects
* &quot;node-browscap&quot;:https://github.com/dangrossman/node-browscap -- browscap.ini parser and port of PHP&#39;s get_browser function
* &quot;node_spreadsheet&quot;:https://github.com/shimondoodkin/node_spreadsheet -- Read xls,xlsx,ods,csv spreadsheets (php based)
* &quot;carrier&quot;:https://github.com/pgte/carrier -- Evented stream line reader for node.js
* &quot;parser_email&quot;:https://github.com/jrgns/parser_email - Simple multi type email parser
* &quot;memcache-parser&quot;:https://github.com/billywhizz/node-memcache-parser - Memcached binary protocol parser
* &quot;fastcgi-parser&quot;:https://github.com/billywhizz/node-fastcgi-parser - FastCGI protocol parser and Writer
* &quot;node-formidable&quot;:https://github.com/felixge/node-formidable - A node.js module for parsing form data, especially file uploads.
* &quot;CSSOM&quot;:https://github.com/NV/CSSOM - CSS parser and CSS Object Model implementation.
* &quot;glossy&quot;:https://github.com/squeeks/glossy - Syslog message parser and producer
* &quot;UglifyJS&quot;:https://github.com/mishoo/UglifyJS - JavaScript parser and compressor/beautifier
* &quot;epub&quot;:https://github.com/andris9/epub - Parse EPUB electronic book files with Node.JS, load chapters, images etc.
* &quot;marked&quot;:https://github.com/chjj/marked - A markdown parser and compiler. Built for speed.
* &quot;feed-tables&quot;:https://github.com/tomvit/Feed-Tables - a lightweight parser for Google Spreadsheet tables available as cells or list atom feeds.
* &quot;NodePie&quot;:https://github.com/andris9/NodePie - Simple RSS/Atom parser for Node.JS
* &quot;node-musicmetadata&quot;:https://github.com/leetreveil/node-musicmetadata - Get music metadata asynchronously from node streams.
* &quot;node-struct&quot;:https://github.com/xdenser/node-struct -- Parse/format binary data in buffers.
* &quot;node-feedparser&quot;:https://github.com/danmactough/node-feedparser - RSS, Atom, and RDF feed parsing in Node.js
* &quot;node-opmlparser&quot;:https://github.com/danmactough/node-opmlparser - OPML parsing in Node.js
* &quot;VIE&quot;:https://github.com/bergie/VIE - RDFa parsing in Node.js
* &quot;butter&quot;:https://github.com/rootslab/butter - Butter === nodeJS Buffer + ( some hexadecimals delights )
* &quot;feedme.js&quot;:https://github.com/fent/feedme.js -- RSS/Atom feed parser written with sax-js
* &quot;JS-YAML&quot;:https://github.com/nodeca/js-yaml -- Full featured YAML parser. Native PyYAML port.

&lt;a name=&quot;wiki-debugging&quot;&gt;&lt;/a&gt;

h3(#debugging). &quot;Debugging / Console Utilities&quot;:#debugging
* &quot;ain&quot;:https://github.com/akaspin/ain -- Brain-free syslog logging
* &quot;cfdump.js&quot;:https://github.com/figital/cfdump.js -- a more visually inspiring way to dump your objects to a browser
* &quot;cli-color&quot;:https://github.com/medikoo/cli-color -- colors and formatting for the console
* &quot;colors.js&quot;:https://github.com/Marak/colors.js -- get colors in your node.js console like what
* &quot;colours.js&quot;:https://github.com/botanicus/colours.js -- Give your CLI programs some colours!
* &quot;colored.js&quot;:https://github.com/chrislloyd/colored.js -- Colorize terminal output.
* &quot;consolelog.js&quot;:https://github.com/jazzychad/consolelog.node.js -- stylized console logging for node.js
* &quot;Eclipse debugger plugin&quot;:http://code.google.com/p/chromedevtools/ -- [[Using Eclipse as Node Applications Debugger]]
* &quot;eyes.js&quot;:https://github.com/cloudhead/eyes.js -- A better, customizable value inspector for node.js
* &quot;Caterpillar&quot;:https://github.com/balupton/caterpillar.npm -- Caterpillar is an awesome, simple, intuitive console logger for node.js. It supports grouping of messages, filtering log levels, colors, times, modules, custom formatters and custom transports.
* &quot;irc-colors.js&quot;:https://github.com/fent/irc-colors.js --Color and formatting for irc bots made easy
* &quot;hexy.js&quot;:https://github.com/a2800276/hexy.js -- hex pretty printing like xxd
* &quot;http-console&quot;:https://github.com/cloudhead/http-console -- A simple &amp; intuitive HTTP console for testing APIs.
* &quot;inspect&quot;:https://github.com/visionmedia/inspect -- hierarchical object inspection displaying ancestry, properties, methods, and accessors in great detail.
* &quot;log.js&quot;:https://github.com/visionmedia/log.js -- light-weight logger that works with any writable stream, also supports a streaming parser for reading the log files generated
* &quot;log4js-node&quot;:https://github.com/csausdev/log4js-node -- a port of log4js framework for node.js
* &quot;logging&quot;:https://github.com/dylang/logging -- Super sexy color console logging.
* &quot;logly&quot;:https://github.com/tristanls/logly -- A minimal logging utility to support verbose and debug modes
* &quot;nlogger&quot;:https://github.com/igo/nlogger -- Logging lib that can print also module names and line numbers, optionally in color
* &quot;node-logging&quot;:https://github.com/HerdHound/node-logging -- Simple colorized logging for Node.js with request logger Express middleware
* &quot;monitor&quot;:https://github.com/lorenwest/node-monitor -- Runtime monitoring for node.js applications - npm install monitor
* &quot;node-logentries&quot;:https://github.com/rjrodger/node-logentries -- A winston-compatible wrapper library for the logentries.com service
* &quot;Node-JavaScript-Preprocessor&quot;:https://github.com/mcoolin/Node-JavaScript-Preprocessor -- Preprocessor for JavaScript
* &quot;node-prompt&quot;:https://github.com/jesusabdullah/node-prompt -- Prompt the user for questions in cli!
* &quot;node-streamlogger&quot;:https://github.com/andrewvc/node-streamlogger -- Extensively customizable logging, with support for rotation
* &quot;node_debug&quot;:https://github.com/Connorhd/node_debug/tree/master -- HTTP based console and object explorer
* &quot;ndb&quot;:https://github.com/smtlaissezfaire/ndb -- traditional command line debugger (like gdb, ruby-debug, etc)
* &quot;node-profiler&quot;:https://github.com/bnoordhuis/node-profiler -- access the V8 profiler from node.js
* &quot;node-inspector&quot;:https://github.com/dannycoates/node-inspector -- browser based node debugger
* &quot;node-custom-debug&quot;:https://github.com/bobrik/node-custom-debug -- debugger on custom port on the fly, good addition for node-inspector to inspect many instances on the one server with ease
* &quot;node-cli&quot;:https://github.com/SchizoDuckie/Node-CLI/ -- cli.clear().move(20,20).color(&#39;green&#39;).write(&#39;Node-cli&#39;).down(1).back(7).color(&#39;yellow&#39;).write(&#39;Rocks!&#39;)
* &quot;profilejs&quot;:https://github.com/HerdHound/profilejs -- profiling middleware for use with node-inspector (profiles Express handlers)
* &quot;spine&quot;:https://github.com/thrashaholic/spine -- Dynamic runtime monitoring for node.js applications inspired by lorenwest&#39;s monitor.
* &quot;spruce&quot;:https://github.com/MarkPNeyer/spruce -- configurable node.js logging module
* &quot;strack&quot;:https://github.com/selead/strack -- bug tracking/tickets system
* &quot;underscore.logger&quot;:https://github.com/viatropos/underscore.logger -- Cross-browser and Node.js empowered logging that can be used as an Underscore mixin.
* &quot;v8-profiler&quot;:https://github.com/dannycoates/v8-profiler -- v8 profiler bindings with node-inspector integration
* &quot;webrepl&quot;:https://github.com/mmattozzi/webrepl -- Serve a repl for a node process via a simple web ui
* &quot;Replica&quot;:https://github.com/zentooo/Replica -- Repl to exec JavaScript code on browser
* &quot;Shell&quot;:https://github.com/wdavidw/node-shell -- Nice looking shell applications with pluggable middlewares
* &quot;Winston&quot;:https://github.com/indexzero/winston -- A multi-transport async logging library for node.js
* &quot;flume-rpc&quot;:https://github.com/recoset/node-flume-rpc -- A flume-compatible (RPC) logging source and sink
* &quot;colorlog.js&quot;:https://github.com/tih-ra/colorlog.js -- Sexy color logging

&lt;a name=&quot;wiki-compression&quot;&gt;&lt;/a&gt;

h3(#compression). &quot;Compression&quot;:#compression
* &quot;gzippo&quot;:https://github.com/tomgallacher/gzippo -- gzip static content files with Connect/Express using node-compress
* &quot;connect-gzip&quot;:https://github.com/nateps/connect-gzip -- gzip middleware for Connect. Contains middleware for gzipping and serving static files as well as gzipping responses dynamically 
* &quot;gzip&quot;:https://github.com/indutny/node.gzip -- simple compression using default linux &quot;gzip&quot; utility
* &quot;lzma&quot;:https://github.com/nmrugg/LZMA-JS/ -- A standalone JavaScript implementation of the Lempel-Ziv-Markov chain (LZMA) compression algorithm
* &quot;node-compress&quot;:https://github.com/waveto/node-compress -- streaming compression / gzip library
* &quot;node-compress by egorich239&quot;:https://github.com/egorich239/node-compress -- asynchronous streaming (de)compression library with gzip and bzip2 support, originally forked from &quot;waveto&#39;s&quot;:https://github.com/waveto/node-compress
* &quot;node-gzbz2&quot;:https://github.com/Woodya/node-gzbz2 -- streaming compression / gzip / bzip2 library for node.js, originally forked from &quot;waveto&#39;s&quot;:https://github.com/waveto/node-compress
* &quot;node-compress-buffer&quot;:https://github.com/egorfine/node-compress-buffer -- single-step Buffer compression library on top of zlib
* &quot;node-snappy&quot;:https://github.com/kesla/node-snappy -- compression using Google&#39;s snappy library.
* &quot;node-zipfile&quot;:https://github.com/springmeyer/node-zipfile -- inspect and uncompress zipfile archives (C++ around libzip)
* &quot;node-zlibstream&quot;:https://github.com/carsonmcdonald/node-zlibstream -- Streaming zlib library using zlib
* &quot;node-zlib-sync&quot;:https://github.com/ssuda/node-zlib-sync -- rfc1950/rfc1951/rfc1952 compress/uncompress (C++ around libzlib)
* &quot;node-lzf&quot;:https://github.com/Sonetica/node-lzf - lzf compression library (C++ around liblzf)
&lt;a name=&quot;wiki-graphics&quot;&gt;&lt;/a&gt;

h3(#graphics). &quot;Graphics&quot;:#graphics
* &quot;pdfkit&quot;:https://github.com/devongovett/pdfkit -- A powerful PDF generation library for Node
* &quot;node-wkhtml&quot;:https://github.com/mhemesath/node-wkhtml -- Convert HTML to PDF or PNG using the Webkit Rendering Engine.
* &quot;drawback&quot;:https://github.com/LearnBoost/drawback -- Seamless way to render 2D drawings on the client side using HTML5 technologies with a server-side backend.
* &quot;node-canvas&quot;:https://github.com/learnboost/node-canvas -- High performance canvas implementation backed by the phenomenal Cairo graphics library
* &quot;node-o3-canvas&quot;:https://github.com/ajaxorg/node-o3-canvas -- Fast HTML5 Canvas and image processing implementation based on AGG
* &quot;node-gd&quot;:https://github.com/taggon/node-gd -- GD graphic library bindings
* &quot;magickal-node&quot;:https://github.com/quiiver/magickal-node -- GraphicsMagick wrapper for node.js
* &quot;node-magick&quot;:https://github.com/mirkok/Node-Magick -- rewrite of GraphicsMagick wrapper magickal-node fixing some issues
* &quot;node-imagemagick&quot;:https://github.com/rsms/node-imagemagick -- ImageMagick module
* &quot;node-png&quot;:https://github.com/pkrumins/node-png -- Convert an RGB or RGBA buffer to PNG fast
* &quot;node-gif&quot;:https://github.com/pkrumins/node-gif -- Convert an RGB or RGBA buffer to GIF fast
* &quot;node-jpeg&quot;:https://github.com/pkrumins/node-jpeg -- Convert an RGBA or RGB buffer to JPEG fast
* &quot;node-ogl&quot;:https://github.com/tmpvar/node-ogl -- OpenGL bindings
* &quot;node-webgl&quot;:https://github.com/pufuwozu/node-webgl -- WebGL emulation
* &quot;gm&quot;:https://github.com/aheckmann/gm -- GraphicsMagick for node
* &quot;node-video&quot;:https://github.com/pkrumins/node-video -- Create Theora/OGG videos from RGB(A) buffers (and stream them via &lt;video&gt; tag)
* &quot;node-image&quot;:https://github.com/pkrumins/node-image -- Unifies node-png, node-gif, node-jpeg
* &quot;node-pango-view&quot;:https://github.com/shimondoodkin/node-pango-view -- print text with pango to temporary png image, then merge it with ImageMagick. 
* &quot;squeeze&quot;:https://github.com/nikhilm/squeeze -- Mince and convert images on the cloud using &quot;UploadJuicer&quot;:http://www.uploadjuicer.com .
* &quot;node-graphviz&quot;:https://github.com/glejeune/node-graphviz -- GraphViz for node
* &quot;node-mapnik&quot;:https://github.com/mapnik/node-mapnik -- Mapnik bindings for high performance rendering of map tiles.
* &quot;node-mapserver&quot;:https://github.com/pagameba/node-mapserver -- mapserver bindings for rendering mapserver MAP files via node
* &quot;node-exif&quot;:https://github.com/gomfunkel/node-exif -- Library to extract Exif metadata from images
* &quot;node-fluent-ffmpeg&quot;:https://github.com/schaermu/node-fluent-ffmpeg -- Fluent API for ffmpeg (including streaming, thumbnail-generation and custom presets)
* &quot;ffmpeg2theora&quot;:https://github.com/FLYBYME/node-ffmpeg2theora -- Batch encoding with ffmpeg2theora
* &quot;ffmpeg-node&quot;:https://github.com/xonecas/ffmpeg-node -- Node.js driver for ffmpeg library
* &quot;Face.js&quot;:https://github.com/talvarez/Face.js -- Node.js module for detecting faces in images
* &quot;youtube-dl&quot;:https://github.com/fent/node-youtube-dl -- youtube-dl driver for node
* &quot;node-handbrake&quot;:https://github.com/cwolves/node-handebrake -- HandBrakeCLI wrapper to encode an entire folder of videos
&lt;a name=&quot;wiki-sound&quot;&gt;&lt;/a&gt;

h3(#sound). &quot;Sound&quot;:#sound
* &quot;node-sound&quot;:https://github.com/xk/node-sound -- The best sound library for Node
&lt;a name=&quot;wiki-payment-gateways&quot;&gt;&lt;/a&gt;

h3(#payment-gateways). &quot;Payment Gateways&quot;:#payment-gateways
* &quot;paynode&quot;:https://github.com/jamescarr/paynode - library for integrating with various payment gateways
* &quot;braintree&quot;:https://github.com/braintree/braintree_node -- library for integrating with Braintree
* &quot;node-fortumo&quot;:https://github.com/andris9/node-fortumo -- bindings for Fortumo SMS payment API
* &quot;paypal-ipn&quot;:https://github.com/andzdroid/paypal-ipn -- library for verifying paypal IPN messages
* &quot;node-stripe&quot;:https://github.com/abh/node-stripe -- library for integrating with &quot;Stripe&quot;:https://stripe.com/

&lt;a name=&quot;wiki-api-clients&quot;&gt;&lt;/a&gt;

h3(#api-clients). &quot;API clients&quot;:#api-clients
* &quot;authome&quot;:https://github.com/jed/authome - A dependency-free mutli-service authentication tool
* &quot;supervisord&quot;:https://github.com/spiceapps/supervisord - Library for supervisord 
* &quot;aws-lib&quot;:https://github.com/mirkok/aws-lib -- An extensible library for Amazon Web Services including EC2, SimpleDB and the Product Advertising API
* &quot;aws2js&quot;:https://github.com/SaltwaterC/aws2js -- Amazon Web Services APIs client implementation for node.js. Simple to use and extend.
* &quot;ec2metadata&quot;:https://github.com/kilianc/node-ec2metadata -- An API wrapper for the AWS EC2 metadata.
* &quot;calais&quot;:https://github.com/mcantelon/node-calais -- Semantically analyze text using the Calais web service
* &quot;cpanel-lib&quot;:https://github.com/vially/cpanel-lib -- Node.js client for the cPanel/WHM API
* &quot;discogs&quot;:https://github.com/linus/discogs -- Discogs API client
* &quot;node-dropbox&quot;:https://github.com/Rendez/node-dropbox -- Node.js client for the Dropbox API
* &quot;dropbox-node&quot;:https://github.com/evnm/dropbox-node -- A wrapper for the Dropbox API 
* &quot;dribbble-node&quot;:https://github.com/carlosvillu/Dribbble-node -- A wrapper for the Dribbble API
* &quot;evented-twitter&quot;:https://github.com/polotek/evented-twitter -- asynchronous twitter client, supports streaming api
* &quot;facebook-js&quot;:https://github.com/masylum/facebook-js -- Easy peasy facebook client for connect.
* &quot;facebook-api&quot;:https://github.com/mren/facebook-api -- offers high level and low level calls against the facebook graph API
* &quot;fbgraph&quot;:https://github.com/criso/fbgraph -- Sexay Facebook graph api
* &quot;fitbit-js&quot;:https://github.com/smurthas/fitbit-js -- Simple FitBit API wrapper
* &quot;flickr-reflection&quot;:https://github.com/teemow/node-flickr-reflection -- A flickr client that uses their reflection API (supports auth)
* &quot;flickrnode&quot;:https://github.com/ciaranj/flickrnode -- A library to enable use of the flickr api (not as complete as node-flickr, but supports auth) 
* &quot;forrst&quot;:https://github.com/fczuardi/node-forrst -- Simple wrapper for the Forrst.com API.
* &quot;gdata-js&quot;:https://github.com/smurthas/gdata-js -- Simple Google Data API OAuth 2.0 wrapper
* &quot;geo&quot;:http://github.com/feliperazeek/geonode -- A very basic, but simple, geocode library, currently using Google Geocode API (v3)
* &quot;gist&quot;:https://github.com/emerleite/node-gist -- A gist creator. Create GISTs and use the generated URI.
* &quot;gravatar&quot;:https://github.com/emerleite/node-gravatar -- Well tested Node.JS Gravatar URL generator
* &quot;hipchat-js&quot;:https://github.com/smurthas/hipchat-js -- Simple HipChat API wrapper
* &quot;instagram-node-lib&quot;:https://github.com/mckelvey/instagram-node-lib -- Library for easy interaction with the Instagram API
* &quot;janrain-api&quot;:https://github.com/demetriusj/janrain -- Module for interfacing with Janrain Engage API
* &quot;klout-js&quot;:https://github.com/smurthas/klout-js -- Simple Klout API wrapper
* &quot;lastfm-node&quot;:https://github.com/jammus/lastfm-node -- Read and write to users&#39; recent plays on Last.fm
* &quot;libravatar&quot;:https://github.com/fmarier/node-libravatar -- Module for generating &quot;Libravatar&quot;:https://www.libravatar.org avatar URLs.
* &quot;linkedin-js&quot;:https://github.com/masylum/linkedin-js -- Easy peasy linkedin client for connect.
* &quot;mixpanel-node&quot;:https://github.com/carlsverre/mixpanel-node -- A simple Mixpanel API library for server-side analytics.
* &quot;madmimi-node&quot;:https://github.com/garrensmith/Madmimi-node -- Client library for the MadMimi email api [[http://www.madmimi.com]].
* &quot;node-500px&quot;:https://github.com/ro-ka/node-500px -- A wrapper for the [[http://www.500px.com]] API.
* &quot;node-mixpanel-api&quot;:https://github.com/campfirelabs/node-mixpanel-api -- A simple client for the Mixpanel Data API (not event tracking! see above)
* &quot;node-apn&quot;:https://github.com/argon/node-apn -- A library to send messages using the Apple Push Notification Service.
* &quot;node-armory&quot;:https://github.com/xtian/node-armory -- A simple wrapper around Blizzard&#39;s REST API for World of Warcraft.
* &quot;node-c2dm&quot;:https://github.com/SpeCT/node-c2dm -- A library to send messages using the Android Cloud to Device Messaging (C2DM) service.
* &quot;node-bitly&quot;:https://github.com/tanepiper/node-bitly -- A bit.ly API library for node.js - provides URL shortening/expanding.  Features full API.
* &quot;node-cloudfiles&quot;:https://github.com/nodejitsu/node-cloudfiles -- A client implementation for Rackspace CloudFiles in node.js
* &quot;node-cloudservers&quot;:https://github.com/nodejitsu/node-cloudservers -- A client implementation for Rackspace CloudServers in node.js
* &quot;node-foursquare&quot;:https://github.com/clintandrewhall/node-foursquare -- A wrapper for the Foursquare v2 API.
* &quot;node-klout&quot;:https://github.com/edwardhotchkiss/node-klout -- Extremely reliable Node.js Klout API Wrapper
* &quot;node-github&quot;:https://github.com/ajaxorg/node-github -- A wrapper for the &quot;GitHub API&quot;:http://develop.github.com/
* &quot;node-gitteh&quot;:https://github.com/libgit2/node-gitteh -- Async, stable, feature-complete bindings for the &quot;libgit2&quot;:http://libgit2.github.com/ library.
* &quot;nodegit&quot;:https://github.com/tbranyen/nodegit -- Asynchronous native Node.js &quot;libgit2&quot;:http://libgit2.github.com/ bindings with a convenient api
* &quot;node-gdata&quot;:https://github.com/ammmir/node-gdata -- A generic Google Data API client library
* &quot;node-googleanalytics&quot;:https://github.com/ncb000gt/node-googleanalytics -- Google Analytics GData export library
* &quot;node-googlemaps&quot;:https://github.com/moshen/node-googlemaps -- A wrapper for the Google Maps API
* &quot;node-loggly&quot;:https://github.com/nodejitsu/node-loggly --A client implementation for Loggly in node.js
* &quot;node-mailgun&quot;:https://github.com/shz/node-mailgun -- Client library for MailGun
* &quot;node-ostatus&quot;:https://github.com/eschnou/node-ostatus -- An implementation of the OStatus protocol (Webfinger, Push, Hcard, Salmon, etc.)
* &quot;node-posterous&quot;:https://github.com/andzdroid/node-posterous -- Library for the Posterous API
* &quot;node-prowl&quot;:https://github.com/mape/node-prowl -- A module that allows you to send push notifications to your iPhone through the Prowl API
* &quot;node-rapleaf&quot;:https://github.com/tralamazza/node-rapleaf -- RapLeaf API client
* &quot;node-sendgrid&quot;:https://github.com/HerdHound/node-sendgrid -- Sendgrid SMTP API headers library
* &quot;nodefm&quot;:https://github.com/mikebannister/nodefm -- So far just a util for consuming last.fm recent tracks history for a user
* &quot;nodestalker&quot;:https://github.com/pascalopitz/nodestalker -- A beanstalkd client for node
* &quot;nodestagram&quot;:https://github.com/Swizec/nodestagram -- Instagram client for node
* &quot;nodevore&quot;:https://github.com/troufster/nodevore -- Convore API wrapper
* &quot;node-taobao&quot;:https://github.com/e6nian/node-taobao/ -- A client library for taobao.com api
* &quot;node-twilio&quot;:https://github.com/sjwalter/node-twilio/ -- A helper library for the Twilio API
* &quot;node-twitter&quot;:https://github.com/jdub/node-twitter -- Asynchronous Twitter REST/stream/search client for node.js
* &quot;node-vk&quot;:https://github.com/Sonetica/node-vk -- vkontakte.ru and vk.com social network api wrapper for mobile and desktop applications.
* &quot;pingdom&quot;:https://github.com/ryanbreen/node-pingdom -- A module for accessing the Pingdom JSON API
* &quot;webmetrics&quot;:https://github.com/ryanbreen/node-webmetrics -- A module for accessing the Webmetrics JSON API
* &quot;postageapp&quot;:https://github.com/postageapp/postageapp-nodejs -- A module for sending emails through the PostageApp JSON API
* &quot;tropo-webapi-node&quot;:https://github.com/tropo/tropo-webapi-node -- A library for building multi-channel communication apps with the Tropo WebAPI.
* &quot;SMSified-node&quot;:https://github.com/smsified/smsified-node -- A module for sending and receiving SMS messages (text messages) with the SMSified API.
* &quot;tumblrrr&quot;:https://github.com/mvrilo/tumblrrr -- A wrapper for Tumblr&#39;s API
* &quot;tumblr&quot;:https://github.com/meritt/node-tumblr -- A wrapper for Tumblr&#39;s API v2
* &quot;tweetstream&quot;:https://github.com/mikeal/tweetstream -- Stream like API for twitter&#39;s HTTP streaming interface.
* &quot;twitter-search&quot;:https://github.com/edwardhotchkiss/twitter-search -- Twitter API Search w/ search result pagination, returning up to 1500 queried tweets with RegEx search, kSorts, Klout scoring and filters
* &quot;TwitScript&quot;:https://github.com/ryanmcgrath/twitscript -- A port of Twython to Node.js (Twitter API Library)
* &quot;twitter-js&quot;:https://github.com/masylum/twitter-js -- Easy peasy twitter client for connect.
* &quot;node-gravatar&quot;:https://github.com/arnabc/node-gravatar -- Node.js Gravatar URL generator, can be used with Node.js blogging frameworks 
* &quot;node-spore&quot;:https://github.com/francois2metz/node-spore -- Node.js implementation of &quot;spore&quot;:https://github.com/SPORE/ Generate api client with a json file.
* &quot;akismet-js&quot;:https://github.com/oozcitak/akismet-js -- A client for the &quot;Akismet spam detection API&quot;:http://akismet.com/development/api/
* &quot;spotify&quot;:https://github.com/roncioso/node-spotify-metadata -- Spotify api wrapper. Metadata lookup and search. Works with Spotify and http uris
* &quot;node-mailchimp&quot;:https://github.com/gomfunkel/node-mailchimp -- A wrapper for the MailChimp API, MailChimp Export API and MailChimp Webhooks
* &quot;ranger&quot;:https://github.com/mrduncan/ranger/ -- A simple library which wraps Campfire&#39;s API
* &quot;node-notifo&quot;:https://github.com/nerocreativo/node-notifo -- Real-time notifications pushed to your mobile phone (and more).
* &quot;node-beaconpush&quot;:https://github.com/cgbystrom/node-beaconpush -- Client for the Beaconpush REST API. A real-time push service for browsers supporting WebSockets and Comet.
* &quot;node-neoip&quot;:https://github.com/jeromeetienne/node-neoip -- binding for neoip
* &quot;node-pdfcrowd&quot;:https://github.com/pdfcrowd/node-pdfcrowd -- A wrapper for the Pdfcrowd API. It lets you convert web pages and raw HTML code to PDF.
* &quot;node-yelp&quot;:https://github.com/olalonde/node-yelp -- A wrapper for the Yelp&#39;s APIv2. Let&#39;s you search for businesses and get specific business information.
* &quot;sailthru-client&quot;:https://github.com/sailthru/sailthru-node-client -- A wrapper for Sailthru API
* &quot;yammer-js&quot;:https://github.com/smurthas/yammer-js -- Simple Yammer API wrapper
* &quot;node-wikimapia&quot;:https://github.com/Sannis/node-wikimapia -- Node.js wrapper for the Wikimapia API
* &quot;waz-storage-js&quot;:https://github.com/jpgarcia/waz-storage-js -- A simple implementation of Windows Azure Storage API for Node.js
* &quot;virustotal.js&quot;:https://github.com/SaltwaterC/virustotal.js -- VirusTotal API client for node.js
* &quot;VIE&quot;:https://github.com/bergie/VIE -- Apache Stanbol and DBpedia API client for Node.js

&lt;a name=&quot;wiki-async-flow&quot;&gt;&lt;/a&gt;

h3(#async-flow). &quot;Control flow / Async goodies&quot;:#async-flow
* &quot;async.js&quot;:https://github.com/fjakobs/async.js -- Async chaining and file system utilities. Async.js is to node&#39;s fs module, what jQuery is to the DOM.
* &quot;async&quot;:https://github.com/caolan/async -- Comprehensive async map/reduce and control flow (parallel, series, waterfall, auto...) module that works in node and the browser
* &quot;atbar&quot;:https://github.com/mark-hahn/atbar -- Async callback manager for javascript in nodejs and browser
* &quot;begin&quot;:https://github.com/arumons/begin -- Control flow library for node.js and CoffeeScript
* &quot;chainsaw&quot;:https://github.com/substack/node-chainsaw -- Build chainable fluent interfaces the easy way in node.js
* &quot;channels&quot;:https://github.com/Pita/channels -- Event channels for node.js
* &quot;Cinch&quot;:https://github.com/pguillory/cinch -- Write async code in sync form.
* &quot;deferred&quot;:https://github.com/medikoo/deferred -- Asynchronous control-flow with deferred and promises
* &quot;each&quot;:https://github.com/wdavidw/node-each -- Chained and parallel async iterator in one elegant function
* &quot;EventProxy.js&quot;:https://github.com/JacksonTian/eventproxy -- An implementation of task/event based asynchronous pattern. Use events to avoid dirty callbacks.
* &quot;fiberize&quot;:https://github.com/lm1/node-fiberize -- Node API wrapper for use with fibers.
* &quot;fibers&quot;:https://github.com/laverdet/node-fibers -- The closest thing to a thread you&#39;ll find in JavaScript
* &quot;fibers-promise&quot;:https://github.com/lm1/node-fibers-promise -- Small yet powerful promises based on fibers.
* &quot;first&quot;:https://github.com/DanielBaulig/first -- A tiny control-flow library.
* &quot;flow-js&quot;:https://github.com/willconant/flow-js -- Continuation-esque contruct for expressing multi-step asynchronous logic
* &quot;funk&quot;:https://github.com/masylum/funk -- Asynchronous parallel functions made funky!
* &quot;futures&quot;:https://github.com/coolaj86/futures - Asynchronous Method Queueing, Futures, Promises, Subscriptions, and other async goodies
* &quot;promise&quot;:https://github.com/megakorre/promise -- A Continuation handler (monad) with a condition system for errors
* &quot;groupie&quot;:https://github.com/alexkwolfe/groupie -- A simple control flow library for executing multiple functions as a group or in a chain, calling back when complete.
* &quot;Ignite&quot;:http://www.ignitejs.com/ -- An easy-to-use async programming framework inspired by UML2 state machines.
* &quot;Jscex&quot;:http://github.com/JeffreyZhao/jscex -- Transforms sync code into monadic, async code as the async support in F# and Scala.
* &quot;JobManager&quot;:https://github.com/demian85/node-jobmanager -- A really simple tool that helps you manage multiple asynchronous tasks.
* &quot;miniqueue&quot;:https://github.com/hsch/node-miniqueue -- A very simple in-memory queue for easy sequential processing
* &quot;$N&quot;:https://github.com/chjj/-N -- Simple control flow with pretty syntax.
* &quot;nestableflow&quot;:https://github.com/minodisk/flow-js -- Asynchronous nestable flow-control (serial, parallel, repeat, wait, function) module for Node.js, RequireJS, and browser.
* &quot;node-fnqueue&quot;:https://github.com/kilianc/node-fnqueue -- Functions chain utility
* &quot;node-chain&quot;:https://github.com/ArtS/node-chain -- Simple call chaining library for node.js
* &quot;node-continuables&quot;:https://github.com/bentomas/node-continuables -- A library making dealing with asynchronous code easier
* &quot;node-cron&quot;:https://github.com/ncb000gt/node-cron -- Schedule callbacks with cron syntax
* &quot;node-crontab&quot;:https://github.com/dachev/node-crontab -- Allows reading, manipulating, and writing user crontabs from node.js
* &quot;node-inflow&quot;:https://github.com/shimondoodkin/node-inflow -- A next generation async control-flow library, with a shared object for called functions and debugging made easy.
* &quot;node_memo&quot;:https://github.com/akidee/node_memo -- Sophisticated function memoization
* &quot;node-parallel&quot;:https://github.com/Tim-Smart/node-parallel -- Create tasks in node.js that run in parallel, or sequences that run tasks one after another.
* &quot;node-promise&quot;:https://github.com/kriszyp/node-promise -- Robust promises for node.js, includes promise utilities and promise-based I/O library
* &quot;narrow&quot;:https://github.com/0ctave/node-narrow -- Shrinks a given callback parallel execution concurrency in a limited number of threads, receiving a big bunch of data (array of tasks)
* &quot;neuron&quot;:https://github.com/indexzero/neuron -- The simplest possible event driven job manager, FIFO queue, and &quot;task based cache&quot; in node.js
* &quot;noflo&quot;:https://github.com/bergie/noflo -- &quot;Flow-Based Programming&quot;:http://en.wikipedia.org/wiki/Flow-based_programming system for Node.js
* &quot;observer&quot;:https://github.com/azer/observer -- An alternative observer implementation, for both ss&amp;cs.
* &quot;poolr&quot;:https://github.com/codingforce/poolr -- A lightweight resource pooling/serialization library 
* &quot;q&quot;:https://github.com/kriskowal/q -- Q is a tool for making and composing asynchronous promises in JavaScript.
* &quot;read-files&quot;:https://github.com/pvorb/node-read-files -- Asynchronously read a bunch of files and give a callback when reading is complete.
* &quot;seq&quot;:https://github.com/substack/node-seq -- Chainable asynchronous control flow for node.js with sequential and parallel primitives and pipeline-style error handling
* &quot;sexy&quot;:https://github.com/crabdude/sexy -- Proxy (ES5) for writing sequential asynchronous code in a synchronous style
* &quot;Signals&quot;:http://millermedeiros.github.com/js-signals/ -- Custom Event/Messaging system which supports advanced features, doesn&#39;t rely on strings for the event publishing/subscribing and favor composition over inheritance.
* &quot;simple-schedule&quot;:https://github.com/SaltwaterC/simple-schedule -- Simple scheduler for dispatching a number of batch tasks at defined intervals
* &quot;Slide&quot;:https://github.com/isaacs/slide-flow-control  -- A control flow library that fits in a slide presentation
* &quot;soda.js&quot;:https://github.com/tomyan/soda -- Asynchonous JavaScript module loader for client-side and Node.js
* &quot;Step&quot;:https://github.com/creationix/step -- Tool for grouping and chaining asynchronous callbacks, based on &quot;flow-js&quot;:https://github.com/willconant/flow-js
* &quot;stepc&quot;:https://github.com/akidee/stepc -- A CoffeeScript-safe version of creationix&#39; step
* &quot;streamline.js&quot;:https://github.com/Sage/streamlinejs -- Tool that transforms synchronous code into asynchronous code with callbacks. 
* &quot;sync&quot;:https://github.com/0ctave/node-sync -- Write simple and readable synchronous code in nodejs using fibers (based on &quot;node-fibers&quot;:https://github.com/laverdet/node-fibers)
* &quot;QBox&quot;:https://github.com/arunoda/qbox -- Quick Controller flow for NodeJS
* &quot;zo.js&quot;:https://github.com/refractalize/zo -- Async-friendly versions of the usual list processing functions: `map`, `select`, `reduce` and friends.
* &quot;pauseable&quot;:https://github.com/fent/pauseable.js -- Easily pause and resume event emitters, timeouts, and intervals.

&lt;a name=&quot;wiki-i18n&quot;&gt;&lt;/a&gt;

h3(#i18n). &quot;I18n and L10n modules&quot;:#i18n
* &quot;Lingo&quot;:http://bit.ly/cuaHAh -- Inflection, transformation and more
* &quot;dialect&quot;:https://github.com/masylum/dialect -- Translations for nodejs.
* &quot;dialect-http&quot;:https://github.com/masylum/dialect-http -- http client to manage your dialect translations.
* &quot;node-i18n&quot;:https://github.com/ohaibbq/node-i18n -- node-i18n is a minimalistic internationalization module with templating 
* &quot;i18n-node&quot;:https://github.com/mashpie/i18n-node -- Exports common __(), __n() syntax. Stores JSON objects dynamically on code-change.
* &quot;connect-i18n&quot;:https://github.com/masylum/connect-i18n -- Middleware for connect to handle i18n.
* &quot;translate.js&quot;:https://github.com/Marak/translate.js -- translate text from one language to another on node.js and the browser. 30+ languages supported, simple as cake.
* &quot;inflect&quot;:https://github.com/MSNexploder/inflect -- A port of the Rails / ActiveSupport inflector to JavaScript.
* &quot;node-gettext&quot;:https://github.com/andris9/node-gettext -- Use Gettext .MO files with Node.js.
* &quot;lingua&quot;:https://github.com/akoenig/express-lingua -- A i18n middleware for the Express.js framework.
* &quot;node-date-diff&quot;:https://github.com/morishani/node-date-diff -- Calculates date differences and allows to format it nicely to your language (Eg. In one hour)

&lt;a name=&quot;wiki-boilerplates&quot;&gt;&lt;/a&gt;

h3(#boilerplates). &quot;Boilerplates&quot;:#boilerplates
* &quot;npm-boilerplate&quot;:https://github.com/wearefractal/npm-boilerplate -- Boilerplate for creating NPM packages
* &quot;node-boilerplate&quot;:https://github.com/robrighter/node-boilerplate -- Everything you need to get started on a Node.js website with express and socket.IO
* &quot;transsiberian&quot;:https://github.com/masylum/transsiberian -- [outdated] nodejs boilerplate built upon Express and Mongolia
* &quot;NodeBase&quot;:https://github.com/dotmaster/NodeBase -- A node base class for JavaScript and CoffeeScript (logging, options, defaults and EventEmitter)
* &quot;infigo-node-boilerplate&quot;:https://github.com/jerryjj/infigo-node-boilerplate -- nodejs boilerplate built upon Express, db-mysql/db-drizzle/Mongoose and includes user authentication and group+role authorization system.
* &quot;Skeleton&quot;:https://github.com/edwardhotchkiss/skeleton -- Skeleton is a CLI module to bootstrap a Node/Express project with a skeleton template via any git repository, with an included default repo.

&lt;a name=&quot;wiki-continuous-integration&quot;&gt;&lt;/a&gt;

h3(#continuous-integration). &quot;Continuous Integration Tools&quot;:#continuous-integration
* &quot;nestor&quot;:https://github.com/cliffano/nestor -- Jenkins Node.js CLI

&lt;a name=&quot;wiki-other&quot;&gt;&lt;/a&gt;

h3(#other). &quot;Other&quot;:#other
* &quot;append&quot;:https://github.com/pvorb/node-append -- Append properties from one object to another.
* &quot;audience-meter&quot;:https://github.com/rs/audience-meter -- A simple audience meter based on Socket.IO, perfect for live events tracking
* &quot;node-browserify&quot;:https://github.com/substack/node-browserify -- Browser-side require() for your node modules and npm packages
* &quot;nova&quot;:https://github.com/wearefractal/nova -- Node.js libraries ported to the browser. Write once, run everywhere.
* &quot;behaviors&quot;:https://github.com/caolan/behaviors -- A simple way to check a module&#39;s exports, useful for 3rd party plugins and extensions
* &quot;box2dnode&quot;:https://github.com/jadell/box2dnode -- Port of the box2d physics simulation library
* &quot;node-bullet&quot;:https://github.com/feisty/bullet -- &quot;Bullet Physics&quot;:http://bulletphysics.org/ for node.js
* &quot;node-stem&quot;:https://github.com/chriso/node-stem -- Bindings to the libstemmer library
* &quot;chess&quot;:https://github.com/wsdookad