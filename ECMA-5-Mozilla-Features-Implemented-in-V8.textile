When developing in the browser there are many wonderful built in JavaScript functions that we can't use because certain browsers don't implement them.  As a result, most developers never use them.  In Node, however we can assume that everyone has the same JavaScript implementation and as such can use these wonderful functions and not implement them over and over in our own libraries.

The following is a list of some interesting api bits that aren't considered safe to use in a web setting but are built in to node's V8 engine.

Note that V8 implements all of ECMA 3rd edition and parts of the new stuff in the "ECMA 5th edition":http://www.ecma-international.org/publications/standards/Ecma-262.htm

h2. Syntax extensions

* getter, setter syntax : var obj = { get a() { return "something" }, set a() { "do nothing" } }

h2. Array
 * @isArray(array)@ - Returns true if the passed argument is an array.

h2. Array.prototype
 * @indexOf(value)@ - Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
 * @lastIndexOf(value)@ - Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
 * @filter(callback)@ - Creates a new array with all of the elements of this array for which the provided filtering function returns true.
 * @forEach(callback)@ - Calls a function for each element in the array.
 * @every(callback)@ - Returns true if every element in this array satisfies the provided testing function.
 * @map(callback)@ - Creates a new array with the results of calling a provided function on every element in this array.
 * @some(callback)@ - Returns true if at least one element in this array satisfies the provided testing function.
 * @reduce(callback[, initialValue])@ - Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value.
 * @reduceRight(callback[, initialValue])@ - Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.

h2. Date.prototype
 * @toISOString()@ - 

h2. Object
 * @create( proto, props )@ - Creates a new object whose prototype is the passed in parent object. 
 * @keys(object)@ - Returns a list of the ownProperties of an object that are enumerable.
 * @getOwnPropertyNames(object)@ - Returns a list of the ownProperties of an object including ones that are not enumerable.
 * @getPrototypeOf(object)@ - Returns the prototype of an object.
 * @getOwnPropertyDescriptor(object, property)@ - Returns an object with keys describing the description of a property (value, writable, enumerable, configurable)

h2. Object.prototype
 * @__defineGetter__(name, callback)@ - Associates a function with a property that, when accessed, executes that function and returns its return value.
 * @__defineSetter__(name, callback)@ - Associates a function with a property that, when set, executes that function which modifies the property.
 * @__lookupGetter__(name)@ - Returns the function associated with the specified property by the __defineGetter__ method.
 * @__lookupSetter__(name)@ - Returns the function associated with the specified property by the __defineSetter__ method.
 * @isPrototypeOf(object)@ - Returns true if @this@ is a prototype of the passed in object.

h2. JSON
 * @stringify(object)@ - Takes any serializable object and returns the JSON representation as a string.
 * @parse(string)@ - Takes a well formed JSON string and returns the corresponding JavaScript object.

h2. String.prototype
 * @trim()@ - Trims whitespace from both ends of the string
 * @trimRight()@ - Trims whitespace from the right side of the string
 * @trimLeft()@ - Trims whitespace from the left side of the string

h1. Missing features
 * @Object.freeze(obj)@ - 
 * @Object.preventExtensions(obj)@ - 
 * @Object.isExtensible(obj)@ - 
 * @Object.defineProperty( obj, prop, desc )@
 * @Object.defineProperties( obj, props )@
 * @Object.seal( obj )@
 * @Object.isSealed(obj)@
 * @Object.freeze( obj )@
 * @Object.isFrozen(obj)@
 * @Function.prototype.bind(thisArg, arg1, arg2....)@
 * "use strict"; syntax extension